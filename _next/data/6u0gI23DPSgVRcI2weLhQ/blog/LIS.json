{"pageProps":{"postMetadata":{"title":"LIS","date":"2022-02-24 00:01:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"LIS"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      code: \"code\",\n      pre: \"pre\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Longest Increasing Subsequence\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"최장 증가 수열 문제로 어떤 수열에서 순서를 유지한 채 부분을 뽑아낼 때 만들 수 있는 가장 긴 수열을 찾습니다.\\n처음에 헷갈렸던 부분은 증가의 의미가 \\\"~ 이상 ( >= )\\\" 이라고 생각했는데 순수하게 증가하는 \\\"초과\\\"의 의미를 갖습니다.\\n\", _jsx(_components.code, {\n          children: \"[1, 2, 3, 4]\"\n        }), \" 는 가능하지만 \", _jsx(_components.code, {\n          children: \"[1, 2, 3, 3]\"\n        }), \" 은 증가 수열이 아닙니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"가장 간단한 방법\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"문제를 해결하는 가장 간단한 방법은 모든 경우를 만드는 방법입니다.\\n예제로 \", _jsx(_components.code, {\n          children: \"[1, 3, 2, 4]\"\n        }), \"를 가정하겠습니다.\\n현재까지 완성된 순열을 저장하는 리스트를 저장하는 이차원 리스트가 있다고 가정합니다.\\n매 순서마다 각 인덱스에서 시작하는 리스트를 추가합니다.\\n그리고 현재까지 생성된 리스트의 마지막보다 현재 인덱스가 크면 그 리스트에 현재 인덱스 값을 추가한 리스트를 추가합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"List<List<Integer>> sequences;\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"첫 번째 인덱스에서 만들어지는 리스트는 첫 번째 원소를 포함합니다.\\n추가되는 리스트는 \", _jsx(_components.code, {\n          children: \"[1]\"\n        }), \"이 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그리고 두 번째 인덱스에서 시작하는 리스트를 추가합니다.\\n두 번째 인덱스에서는 기존에 존재하는 리스트는 \", _jsx(_components.code, {\n          children: \"[1]\"\n        }), \" 이었고 3이 더 크기 때문에 추가합니다.\\n이렇게 추가된 리스트는 \", _jsx(_components.code, {\n          children: \"[1], [3], [1, 3]\"\n        }), \"이 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"세 번째 인덱스에서도 위의 방식을 반복합니다.\", _jsx(_components.br, {}), \"\\n\", \"이렇게 추가된 리스트는 \", _jsx(_components.code, {\n          children: \"[1], [2], [3], [1, 2], [1, 3]\"\n        }), \"이 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"네 번째까지 반복하면 \", _jsx(_components.code, {\n          children: \"[1], [2], [3], [4], [1, 4], [2, 4], [3, 4], [1, 3, 4], [1, 2, 4]\"\n        }), \"이 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이런 리스트가 만들어진다고 하면 LIS는 \", _jsx(_components.code, {\n          children: \"[1, 3, 4], [1, 2, 4]\"\n        }), \" 중 하나가 되고 최장 길이는 3이 됩니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"위의 방식을 보면 최악의 경우 모든 인덱스에서 증가하는 경우 증가 수열의 개수가 늘어납니다.\\n1, 3, 6, 10 ... 폭으로 증가하는 계차수열로 시간 복잡도는 O(n^3)이 됩니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"LIS"},"__N_SSG":true}
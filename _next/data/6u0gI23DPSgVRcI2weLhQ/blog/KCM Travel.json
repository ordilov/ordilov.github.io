{"pageProps":{"postMetadata":{"layout":"post","title":"KCM Travel","date":"2022-02-26 00:01:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"KCM Travel"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      h2: \"h2\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-kotlin\",\n          children: \"package boj.graph\\n\\nimport java.util.*\\n\\n// [KCM Travel] https://www.acmicpc.net/problem/10217\\nfun main() {\\n    val sb = StringBuilder()\\n    val t = readLine()!!.toInt()\\n    repeat(t) {\\n        val (n, m, k) = readLine()!!.split(\\\" \\\").map { it.toInt() }\\n        val graph = Array(n + 1) { ArrayList<Ticket>() }\\n        repeat(k) {\\n            val (u, v, c, d) = readLine()!!.split(\\\" \\\").map { it.toInt() }\\n            graph[u].add(Ticket(v, c, d))\\n        }\\n        val queue = PriorityQueue<Ticket>()\\n        val dist = Array(n + 1) { Array(m + 1) { Int.MAX_VALUE } }\\n        dist[1][0] = 0\\n        queue.add(Ticket(1, 0, 0))\\n        var answer = Int.MAX_VALUE\\n\\n        while (queue.isNotEmpty()) {\\n            val cur = queue.poll()\\n            if (cur.v == n) {\\n                answer = cur.d\\n                break\\n            }\\n            if (dist[cur.v][cur.c] < cur.d) continue\\n            for (ticket in graph[cur.v]) {\\n                val cost = cur.c + ticket.c\\n                val time = cur.d + ticket.d\\n\\n                if (cost > m) continue\\n                if(dist[ticket.v][cost] <= time) continue\\n                dist[ticket.v][cost] = time\\n                queue.add(Ticket(ticket.v, cost, time))\\n            }\\n        }\\n        sb.append(if (answer == Int.MAX_VALUE) \\\"Poor KCM\\\" else answer).append(\\\"\\\\n\\\")\\n    }\\n    println(sb)\\n}\\n\\nprivate class Ticket(val v: Int, val c: Int, val d: Int) : Comparable<Ticket> {\\n    override fun compareTo(other: Ticket): Int = d.compareTo(other.d)\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"시간초과가 계속 나와서 반복작업을 줄여봤지만 계속해서 시간이 초과됐습니다.\\n결국 문제였던 부분은 다른 부분이 아니라 출력 때문이었습니다.\\n처음에 반복마다 println() 으로 출력하는 식으로 해서 오래 걸렸습니다.\\nstringbuilder로 모아서 출력했더니 통과할 수 있었습니다.\\n만약 로직에서 맞는 것 같은데 시간초과가 나온다면 출력을 모아서 해보는걸 추천드립니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"KCM Travel"},"__N_SSG":true}
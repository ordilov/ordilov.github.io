{"pageProps":{"postMetadata":{"title":"[프로그래머스] 전력망을 둘로 나누기 (JAVA)","date":"2022-01-02 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"전력망을 둘로 나누기"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      h3: \"h3\",\n      p: \"p\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"public class Solution {\\n\\n    public int solution(int n, int[][] wires) {\\n        int answer = 100;\\n        for(int i = 0; i < n-1; i++){\\n            DisjointSet set = new DisjointSet(n);\\n            for(int j = 0; j < n-1; j++){\\n                if(j == i) continue;\\n                set.merge(wires[j][0], wires[j][1]);\\n            }\\n            int partialSize = set.getPartialSize();\\n            answer = Math.min(answer, Math.abs(n - 2 * partialSize));\\n        }\\n        return answer;\\n    }\\n\\n    static class DisjointSet{\\n        int[] parents;\\n        int[] rank;\\n\\n        public DisjointSet(int n){\\n            parents = new int[n+1];\\n            rank = new int[n+1];\\n            for(int i = 1; i < n+1; i++){\\n                parents[i] = i;\\n                rank[i] = 1;\\n            }\\n        }\\n\\n        public int find(int u){\\n            if(parents[u] == u) return u;\\n            return parents[u] = find(parents[u]);\\n        }\\n\\n        public void merge(int u, int v){\\n            u = find(u);\\n            v = find(v);\\n            if(u == v) return;\\n            parents[u] = v;\\n        }\\n\\n        private int getPartialSize(){\\n            int size = 0;\\n            int partialParent = find(1);\\n            for(int i = 1; i < parents.length; i++){\\n                if(find(i) == partialParent)\\n                    size++;\\n            }\\n            return size;\\n        }\\n    }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"각 집합의 루트를 찾아서 일치하는지 확인했어야 하는데 부모를 찾아서 비교했습니다.\", _jsx(_components.br, {}), \"\\n\", \"부모가 부분적으로만 갱신되는 점을 생각하지 못했습니다.\", _jsx(_components.br, {}), \"\\n\", \"일단 시간이 더 걸리더라도 확실한 방법으로 풀어야겠습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"전력망을 둘로 나누기"},"__N_SSG":true}
{"pageProps":{"postMetadata":{"layout":"post","title":"Spring Security OAuth2 Client Refresh Token","date":"2022-02-10 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"Spring Security OAuth2 Client"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      code: \"code\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      h3: \"h3\",\n      blockquote: \"blockquote\",\n      hr: \"hr\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Google OAuth2 Refresh Token\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"구글\"\n        }), \" OAuth2 기준 다른 설정 없이 Authorization Code 로 Token을 받으면 refresh Token을 받을 수 없습니다.\\n구글 OAuth2에서 refresh token을 요청하려면 필요한 조건들이 있습니다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"access_type : offline 설정\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"prompt : consent (처믕 설정 시)\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"access_type 옵션은 브라우저가 아닌 서버에서 재요청하기 위해 refresh token을 요청하는 옵션입니다.\\nprompt는 OAuth2 인증을 위해 요청하는 화면이 나오는 기준을 설정합니다.\\n설정하지 않으면 기본적으로 처음 요청시에만 확인을 받고 그 이후에는 받지 않습니다.\\n처음에 refresh token을 받았으면 상관 없지만 테스트를 위해 refresh token을 확인하고 싶은 경우 consent를 설정해야 합니다.\\n그 이유는 구글에서 refresh token은 사용자에게 직접 인증을 받는 순간에만 제공됩니다.\\n그 이후에는 access_type이 offline 이더라도 이미 인증 받은 경우 refresh token이 제공되지 않습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Spring Security OAuth2 Client에서 설정하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"spring security oauth2 client를 사용하면 oauth2 연결을 쉽게 사용할 수 있습니다.\\napplication.yml에서 client-id와 client-secret 그리고 인증을 받을 범위등 옵션등을 설정할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"  security:\\n    oauth2:\\n      client:\\n        registration:\\n          google:\\n            client-id: {client-id}\\n            client-secret: {client-secret}\\n            redirectUri: \\\"{baseUrl}/oauth2/callback/{registrationId}\\\"\\n            scope:\\n              - email\\n              - profile\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"하지만 yml 설정에서 할 수 없는 부분은 refresh token을 받기 위한 설정을 추가할 수 없습니다.\\naccess_type이나 prompt 같은 옵션 파라미터를 추가하려면 추가적인 설정이 필요합니다.\\n설정할 수 있는 방법은 두 가지가 방법이 있습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"ClientRegistrationRepository 수정하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"ClientRegistrationRepository는 위에서 등록한 client registration들을 불러와 정보들을 보관합니다.\\n여기에서 인증 요청을 위해 사용되는 주소는 \", _jsx(_components.code, {\n          children: \"authorizationUri\"\n        }), \"입니다.\\n이 주소 뒤에 필요한 파라미터 쿼리를 추가해주면 됩니다.\\naccess_type을 추가한다면 다음과 같은 주소가 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"\\\"https://accounts.google.com/o/oauth2/v2/auth/?access_type=offline\\\"\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Configuration\\npublic class OAuth2LoginConfig {\\n\\n\\t@Bean\\n\\tpublic ClientRegistrationRepository clientRegistrationRepository() {\\n\\t\\treturn new InMemoryClientRegistrationRepository(this.googleClientRegistration());\\n\\t}\\n\\n\\tprivate ClientRegistration googleClientRegistration() {\\n\\t\\treturn ClientRegistration.withRegistrationId(\\\"google\\\")\\n\\t\\t\\t.clientId(\\\"google-client-id\\\")\\n\\t\\t\\t.clientSecret(\\\"google-client-secret\\\")\\n\\t\\t\\t.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\\n\\t\\t\\t.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\\n\\t\\t\\t.redirectUri(\\\"{baseUrl}/login/oauth2/code/{registrationId}\\\")\\n\\t\\t\\t.scope(\\\"openid\\\", \\\"profile\\\", \\\"email\\\", \\\"address\\\", \\\"phone\\\")\\n\\t\\t\\t.authorizationUri(\\\"https://accounts.google.com/o/oauth2/v2/auth\\\")\\n\\t\\t\\t.tokenUri(\\\"https://www.googleapis.com/oauth2/v4/token\\\")\\n\\t\\t\\t.userInfoUri(\\\"https://www.googleapis.com/oauth2/v3/userinfo\\\")\\n\\t\\t\\t.userNameAttributeName(IdTokenClaimNames.SUB)\\n\\t\\t\\t.jwkSetUri(\\\"https://www.googleapis.com/oauth2/v3/certs\\\")\\n\\t\\t\\t.clientName(\\\"Google\\\")\\n\\t\\t\\t.build();\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"스프링 공식 문서에서 제공하는 ClientRegistration 구성 코드입니다.\\n하지만 설명에는 모든 설정이 하드코딩된 형태로 보통 이렇게 client-id 나 client-secret을 공개된 형태로 사용하지 않습니다.\\n위에서 사용하듯이 yml처럼 환경 변수로 코드 밖에서 따로 관리하길 원합니다.\\n따로 환경 변수를 불러올 수도 있지만, oauth2 client에서 기본적으로 설정한 구성을 그대로 불러오고 싶을 수 있습니다.\\n이 경우 Spring에서는 \", _jsx(_components.code, {\n          children: \"OAuth2ClientProperties\"\n        }), \" 클래스를 통해 불러올 수 있습니다.\\n따라서 위의 코드를 수정하면 다음과 같은 형태가 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Configuration\\n@RequiredArgsConstructor\\npublic class OAuth2LoginConfig {\\n\\n  private final OAuth2ClientProperties properties;\\n\\n  @Bean\\n  public ClientRegistrationRepository clientRegistrationRepository() {\\n    return new InMemoryClientRegistrationRepository(this.googleClientRegistration());\\n  }\\n\\n  private ClientRegistration googleClientRegistration() {\\n    Registration googleRegistration = this.properties.getRegistration().get(\\\"google\\\");\\n    \\n    return ClientRegistration.withRegistrationId(\\\"google\\\")\\n        .clientId(googleRegistration.getClientId())\\n        .clientSecret(googleRegistration.getClientSecret())\\n        .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\\n        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\\n        .redirectUri(\\\"{baseUrl}/login/oauth2/code/{registrationId}\\\")\\n        .scope(\\\"openid\\\", \\\"profile\\\", \\\"email\\\", \\\"address\\\", \\\"phone\\\")\\n        .authorizationUri(\\\"https://accounts.google.com/o/oauth2/v2/auth/?access_type=offline\\\")\\n        .tokenUri(\\\"https://www.googleapis.com/oauth2/v4/token\\\")\\n        .userInfoUri(\\\"https://www.googleapis.com/oauth2/v3/userinfo\\\")\\n        .userNameAttributeName(IdTokenClaimNames.SUB)\\n        .jwkSetUri(\\\"https://www.googleapis.com/oauth2/v3/certs\\\")\\n        .clientName(\\\"Google\\\")\\n        .build();\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"google이 아니더라도 registration에 등록한 키 값을 기준으로 불러와 속성들을 가져와 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"CustomAuthorizationRequestResolver 추가하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"ClientRegistrationRepository를 수정하는 것도 방법이지만 옵션만 추가하는 건데 등록 정보 전부를 불러오는 건 번거로울 수 있습니다.\\n다른 방법으로는 AuthorizationRequestResolver를 구현하는 방법으로 request에 resolver를 추가할 수 있습니다.\\nAuthorizationRequestResolver를 구현하고 나면 추가할 위치는 다음 코드와 같습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\n@RequiredArgsConstructor \\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n private final ClientRegistrationRepository clientRegistrationRepository;\\n\\n @Override\\n  protected void configure(HttpSecurity http) throws Exception {\\n    http.\\n    .oauth2Login()\\n        .authorizationEndpoint()\\n        .authorizationRequestResolver(customAuthorizationRequestResolver))\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"AuthorizationRequestResolver는 ClientRegistrationRepository를 생성 파라미터로 받습니다.\\n이 코드는 Spring docs에서 제공하는 파리미터를 수정하는 코드에서 access_type을 추가한 코드입니다.\\n코드를 살펴보면 생성자로 ClientRegistrationRepository를 주입 받습니다.\\n위에서 ClientRegistationRepository를 수정했다면 중복해서 처리되므로 하나만 선택해서 설정해야 합니다.\\n다음으로 OAuth2AuthorizationRequestResolver로 DefaultOAuth2AuthorizationRequestResolver를 만들어서 사용합니다.\\n구현하는 클래스를 필드값으로 갖고 있는 이유는 DefaultOAuth2AuthorizationRequestResolver는 final 클래스로 상속받을 수 없습니다.\\n상속받을 수 없지만 Spring에서 기본적으로 사용하는 위 클래스가 구현하는 기능이 많기 때문에 가져와서 쓰는 것이 편합니다.\\n모든 기능을 그대로 복사해서 사용해도 되지만 그것도 마찬가지로 중복이 많아지게 됩니다.\\n따라서 필드값으로 사용해서 기본 기능을 실행하고 추가적인 옵션을 넣는 식으로 구현됩니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Component\\npublic class CustomAuthorizationRequestResolver implements OAuth2AuthorizationRequestResolver {\\n\\n  private final OAuth2AuthorizationRequestResolver defaultAuthorizationRequestResolver;\\n\\n  public CustomAuthorizationRequestResolver(\\n      ClientRegistrationRepository clientRegistrationRepository) {\\n\\n    this.defaultAuthorizationRequestResolver =\\n        new DefaultOAuth2AuthorizationRequestResolver(\\n            clientRegistrationRepository, \\\"/oauth2/authorize\\\");\\n  }\\n\\n  @Override\\n  public OAuth2AuthorizationRequest resolve(HttpServletRequest request) {\\n    OAuth2AuthorizationRequest authorizationRequest =\\n        this.defaultAuthorizationRequestResolver.resolve(request);\\n\\n    return authorizationRequest != null ?\\n        customAuthorizationRequest(authorizationRequest) :\\n        null;\\n  }\\n\\n  @Override\\n  public OAuth2AuthorizationRequest resolve(\\n      HttpServletRequest request, String clientRegistrationId) {\\n\\n    OAuth2AuthorizationRequest authorizationRequest =\\n        this.defaultAuthorizationRequestResolver.resolve(\\n            request, clientRegistrationId);\\n\\n    return authorizationRequest != null ?\\n        customAuthorizationRequest(authorizationRequest) :\\n        null;\\n  }\\n\\n  private OAuth2AuthorizationRequest customAuthorizationRequest(\\n      OAuth2AuthorizationRequest authorizationRequest) {\\n\\n    Map<String, Object> additionalParameters =\\n        new LinkedHashMap<>(authorizationRequest.getAdditionalParameters());\\n    additionalParameters.put(\\\"access_type\\\", \\\"offline\\\");\\n    additionalParameters.put(\\\"prompt\\\", \\\"consent\\\");\\n\\n    return OAuth2AuthorizationRequest.from(authorizationRequest)\\n        .additionalParameters(additionalParameters)\\n        .build();\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Refresh Token 사용하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위에서 받아온 Refresh Token은 \", _jsx(_components.code, {\n          children: \"OAuth2AuthorizedClientService\"\n        }), \"에서 관리됩니다.\\n따라서 사용할 클래스에서 Bean으로 주입받고 사용하면 됩니다.\\nOAuth2AuthorizedClientService에서 loadAuthorizedClient로 저장된 정보를 불러와 사용할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"  private final OAuth2AuthorizedClientService oAuth2AuthorizedClientService;\\n\\n  OAuth2AuthorizedClient user = oAuth2AuthorizedClientService.loadAuthorizedClient(\\\"google\\\", authentication.getName());\\n  OAuth2RefreshToken refreshToken = user.getRefreshToken();\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Controller에서 사용하는 경우 다른 방법으로 받을 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@GetMapping(\\\"/foo\\\")\\nvoid foo(@RegisteredOAuth2AuthorizedClient(\\\"google\\\") OAuth2AuthorizedClient user) {\\n    OAuth2RefreshToken refreshToken = user.getRefreshToken();\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n        children: \"이렇게 정리한 이유는 OAuth2 Access Token만으로 구현한 글들은 많이 접할 수 있었지만 Refresh Token은 많이 없었습니다.\\n로그인이 아니라 API를 호출하는 경우 이후에 토큰을 갱신하기 위해서 필요한데 생길 수 있는 문제를 정리해봤습니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"Spring Security OAuth2 Client"},"__N_SSG":true}
{"pageProps":{"postMetadata":{"layout":"post","title":"[프로그래머스] 가장 먼 노드 (JAVA)","date":"2022-01-05 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"가장 먼 노드"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      h3: \"h3\",\n      p: \"p\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"import java.util.*;\\nclass Solution {\\n    \\n    boolean[] visited;\\n    int[] distances;\\n    \\n    public int solution(int n, int[][] edge) {\\n        int answer = 0;\\n        List<List<Integer>> graph = new ArrayList<>();\\n        visited = new boolean[n+1];\\n        distances = new int[n+1];\\n        Arrays.fill(distances, 20001);\\n        distances[1] = 0;\\n        visited[1] = true;\\n        \\n        for(int i = 0; i <= n; i++){\\n            graph.add(new ArrayList<>());\\n        }\\n        for(int[] e : edge){\\n            graph.get(e[0]).add(e[1]);\\n            graph.get(e[1]).add(e[0]);\\n        }\\n        \\n        PriorityQueue<Node> queue = new PriorityQueue<>();\\n        queue.add(new Node(1, 0));\\n        int max = 0;\\n        \\n        while(!queue.isEmpty()){\\n            Node now = queue.poll();\\n            int dist = now.dist;\\n            int to = now.to;\\n            distances[to] = Math.min(distances[to], dist + 1);\\n            if(distances[to] > max){\\n                max = distances[to];\\n                answer = 1;\\n            } else if(distances[to] == max){\\n                answer++;\\n            }\\n            for(int i : graph.get(to)){\\n                if(visited[i]) continue;\\n                visited[i] = true;\\n                queue.add(new Node(i, dist + 1));\\n            } \\n        }\\n \\n        return answer;\\n    }\\n    \\n    static class Node implements Comparable<Node>{\\n        int to;\\n        int dist;\\n        public Node(int to, int dist){\\n            this.to = to;\\n            this.dist = dist;\\n        }\\n        @Override\\n        public int compareTo(Node n){\\n            return this.dist - n.dist;\\n        }\\n    }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"처음 풀었을 때 플로이드 방식을 풀었더니 메모리 초과 + 시간초과가 나왔습니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서 그래프 자료구조를 연결 리스트로 바꾸고 bfs 방식으로 탐색했습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"가장 먼 노드"},"__N_SSG":true}
{"pageProps":{"postMetadata":{"layout":"post","title":"Logback Slack","date":"2022-03-04 00:00:01 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"Logback slack"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Spring logback Slack 메시지\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"에러가 발생하거나 했을 때 가장 쉽게 받아볼 수 있는 방법 중 하나로 슬랙이 있습니다.\\n로그 레벨에 따라서 슬랙으로 로그를 받아볼 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"설정 방법\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"incoming webhooks 설정하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"슬랙 앱에 추가하고 나면 생성되는 webhook_uri 가 필요합니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Spring 설정하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"logback과 slack을 연결하기 위해서 필요한 dependency를 추가해줘야 합니다.\\ngradle 기준으로는 다음 코드를 입력합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"implementation \\\"com.github.maricn:logback-slack-appender:1.4.0\\\"\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"logback-spring.xml 에 추가하기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-xml\",\n          children: \"  <appender name=\\\"SLACK\\\" class=\\\"com.github.maricn.logback.SlackAppender\\\">\\n    <!-- Slack API token -->\\n<!--    <token>1111111111-1111111-11111111-111111111</token>-->\\n    <!-- Slack incoming webhook uri. Uncomment the lines below to use incoming webhook uri instead of API token. -->\\n    <webhookUri>${SLACK_WEBHOOK_URI}</webhookUri>\\n    <!-- Channel that you want to post - default is #general -->\\n    <channel>#noti</channel>\\n    <!-- Formatting (you can use Slack formatting - URL links, code formatting, etc.) -->\\n    <layout class=\\\"ch.qos.logback.classic.PatternLayout\\\">\\n      <pattern>%-4relative [%thread] %-5level %class - %msg%n</pattern>\\n    </layout>\\n    <!-- Username of the messages sender -->\\n    <username>${HOSTNAME}</username>\\n    <!-- Emoji to be used for messages -->\\n    <iconEmoji>:stuck_out_tongue_winking_eye:</iconEmoji>\\n    <!-- If color coding of log levels should be used -->\\n    <colorCoding>true</colorCoding>\\n  </appender>\\n  <!-- Currently recommended way of using Slack appender -->\\n  <appender name=\\\"ASYNC_SLACK\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\">\\n    <appender-ref ref=\\\"SLACK\\\" />\\n    <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\">\\n      <level>WARN</level>\\n    </filter>\\n  </appender>\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"위의 코드는 대부분을 위에서 추가한 라이브러리에서 제공한 readme에서 가져왔습니다.\\n변경한 부분은 token 대신 slack_webhook_uri 를 사용하는 점입니다.\\n설명 그대로 noti를 보낼 채널을 설정하고 로그 레벨을 설정할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"slack webhook uri 설정하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"만약 위의 코드에서 SLACK_WEBHOOK_URI 주소를 그대로 넣게 되면 메일이 오게 됩니다.\\nSlack 에서 webhook 주소를 직접 입력하면 위험하다고 Webhook 주소가 변경되었다는 메일입니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 webhook 주소를 직접 이용하는 것은 가능하지도 않고 위험합니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"따라서 환경 변수를 따로 지정해서 입력합니다.\\napplication.yml 기준으로는 다음과 같이 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"logging:\\n  slack:\\n    webhook-uri: ${SLACK_WEBHOOK_URI}\\n  config: classpath:logback-spring.xml\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"yml 파일을 따로 로컬로 관리하거나 SLACK_WEBHOOK_URI 그대로 시스템 환경변수로 등록해 사용합니다.\\n설정한 이후로 슬랙으로 로그가 오는걸 확인할 수 있습니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"Logback slack"},"__N_SSG":true}
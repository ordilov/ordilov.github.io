{"pageProps":{"postMetadata":{"layout":"post","title":"[프로그래머스] 후보키 (JAVA)","date":"2022-01-11 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"후보키"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      h2: \"h2\",\n      p: \"p\",\n      br: \"br\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"import java.util.Set;\\nimport java.util.HashSet;\\nimport java.util.Arrays;\\nclass Solution {\\n    boolean[] visited;\\n    Set<String> columns = new HashSet<>();\\n    Set<Set<String>> candidates = new HashSet<>();\\n\\n    public int solution(String[][] relation) {\\n        visited = new boolean[relation[0].length];\\n        int answer = 0;\\n        for (int size = 1; size <= relation[0].length; size++) {\\n            answer += countCandidateKey(relation, 0, size);\\n        }\\n        return answer;\\n    }\\n\\n    private int countCandidateKey(String[][] relation, int start, int size) {\\n        if (size == columns.size()) {\\n            if (relation.length != getTupleSize(relation)) return 0;\\n            for (Set<String> candidate : candidates) {\\n                if (columns.containsAll(candidate)) return 0;\\n            }\\n            candidates.add(new HashSet<>(columns));\\n            return 1;\\n        }\\n\\n        int candidateKey = 0;\\n        for (int i = start; i < relation[0].length; i++) {\\n            if (visited[i]) continue;\\n            columns.add(String.valueOf(i));\\n            visited[i] = true;\\n            candidateKey += countCandidateKey(relation, i + 1, size);\\n            columns.remove(String.valueOf(i));\\n            visited[i] = false;\\n        }\\n        return candidateKey;\\n    }\\n\\n    private int getTupleSize(String[][] relation) {\\n        String[] row = new String[relation.length];\\n        Arrays.fill(row, \\\"\\\");\\n        for (String column : columns) {\\n            for (int i = 0; i < relation.length; i++) {\\n                row[i] += relation[i][Integer.parseInt(column)];\\n            }\\n        }\\n        return new HashSet<>(Arrays.asList(row)).size();\\n    }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이전에 풀다가 포기했었던 문제였습니다.\", _jsx(_components.br, {}), \"\\n\", \"여러 개의 칼럼을 어떻게 조합할지 감이 안왔는데 \", _jsx(_components.strong, {\n          children: \"DFS\"\n        }), \"를 이욯해 풀었습니다.\", _jsx(_components.br, {}), \"\\n\", \"먼저 조합으로 모든 경우의 수를 만들고 최소성을 만족하는지 확인했습니다.\", _jsx(_components.br, {}), \"\\n\", \"그런데 처음에는 키들을 문자열 하나로 합쳐서 비교했는데 여기서 문제가 있었습니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n          children: \"[\\\"01\\\", \\\"001\\\"] [\\\"010\\\", \\\"01\\\"]\"\n        }), \" 은 유일성을 만족하지만 합치면 만족 못하는 걸로 판별됩니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 문자열 말고 집합에 담아서 집합끼리 비교해야 했습니다.\", _jsx(_components.br, {}), \"\\n\", \"이걸 가능하게 해주는 함수는 \", _jsx(_components.strong, {\n          children: \"containsAll\"\n        }), \" 입니다.\", _jsx(_components.br, {}), \"\\n\", \"바꾸고서 문제는 통과하지만 비효율적이라고 느껴져 다른 사람들의 풀이를 찾아봤습니다.\", _jsx(_components.br, {}), \"\\n\", \"인상적이었던 부분은 완전 탐색을 할 때 비트연산을 사용하는 것입니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.strong, {\n          children: \"BitSet\"\n        }), \"을 사용할 수도 있고 단순 비트연산으로도 가능합니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"후보키"},"__N_SSG":true}
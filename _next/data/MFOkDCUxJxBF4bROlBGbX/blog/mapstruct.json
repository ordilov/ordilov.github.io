{"pageProps":{"postMetadata":{"layout":"post","title":"MapStruct","date":"2022-01-17 00:45:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"mapstruct"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      br: \"br\",\n      pre: \"pre\",\n      code: \"code\",\n      h3: \"h3\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"MapStruct\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"계층 간 데이터를 주고 받을 때 다른 객체로 변환해서 사용하는 일이 잦습니다.\", _jsx(_components.br, {}), \"\\n\", \"이럴 때 모든 코드를 직접 만들어서 사용한다면 반복적이고 실수하기 쉽습니다.\", _jsx(_components.br, {}), \"\\n\", \"이때 Object Mapping을 사용하면 간단하게 처리가 가능합니다.\", _jsx(_components.br, {}), \"\\n\", \"그 중에서 MapStruct를 가장 많이 사용합니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"사용법\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Mapper \\npublic interface CarMapper {\\n \\n    CarMapper INSTANCE = Mappers.getMapper( CarMapper.class ); \\n \\n    @Mapping(source = \\\"numberOfSeats\\\", target = \\\"seatCount\\\")\\n    CarDto carToCarDto(Car car); \\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"@Mapper 어노테이션을 인터페이스에 지정합니다.\", _jsx(_components.br, {}), \"\\n\", \"이렇게 명시된 인터페이스에 따라 빌드 시 Object Mapping을 하는 클래스를 생성해줍니다.\", _jsx(_components.br, {}), \"\\n\", \"기본적으로 멤버 변수가 같은 이름으로 생성됩니다.\", _jsx(_components.br, {}), \"\\n\", \"다르게 사용하려면 해당 source에 바꿀 이름을 target으로 선택 가능합니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"함수 사용법\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"변수 그대로가 아닌 변수가 가진 함수나 다른 함수로 매핑할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Mapping(target = \\\"creationDate\\\", expression = \\\"java(new java.util.Date())\\\")\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Spring에서 주입 받기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Mapper는 인터페이스이기 때문에 사용할 때 방법은 두 가지가 있습니다.\\n빌드되어 있는 구현체를 직접 생성해서 사용하거나 Spring에서 주입 받는 형태입니다.\\nSpring에서 주입 받으려면 빈으로 등록해야합니다.\\n어노테이션으로 생성 방식을 spring으로 지정하면 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Mapper(componentModel = \\\"spring\\\")\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"mapstruct"},"__N_SSG":true}
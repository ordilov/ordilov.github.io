{"pageProps":{"postMetadata":{"layout":"post","title":"[프로그래머스] 순위 검색","date":"2022-01-19 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"순위 검색"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      h2: \"h2\",\n      p: \"p\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"import java.util.*;\\n\\n// [순위 검색] https://programmers.co.kr/learn/courses/30/lessons/72412?language=java\\npublic class Solution {\\n\\n    public int[] solution(String[] info, String[] query) {\\n        Map<String, List<Integer>> map = new HashMap<>();\\n        for (String i : info) {\\n            String[] split = i.split(\\\" \\\");\\n            int score = Integer.parseInt(split[4]);\\n            for (String c : combination(split)) {\\n                List<Integer> scores = map.getOrDefault(c, new ArrayList<>());\\n                scores.add(score);\\n                map.put(c, scores);\\n            }\\n        }\\n\\n        map.values().forEach(Collections::sort);\\n\\n        int[] answer = new int[query.length];\\n        for (int j = 0; j < query.length; j++) {\\n            String[] split = query[j].split(\\\" \\\");\\n            int score = Integer.parseInt(split[7]);\\n            String q = split[0] + split[2] + split[4] + split[6];\\n            if (map.get(q) == null) continue;\\n            answer[j] = binarySearch(map.get(q), score);\\n        }\\n        return answer;\\n    }\\n\\n    private String[] combination(String[] split) {\\n        String[] comb = new String[16];\\n        Arrays.fill(comb, \\\"\\\");\\n        for (int i = 0; i < 4; i++) {\\n            for (int j = 0; j < (2 << i); j++) {\\n                int size = 8 >> i;\\n                for (int k = 0; k < size; k++) {\\n                    comb[j * size + k] += j % 2 == 0 ? '-' : split[i];\\n                }\\n            }\\n        }\\n        return comb;\\n    }\\n\\n    private int binarySearch(List<Integer> a, int score) {\\n        int low = 0;\\n        int high = a.size();\\n        int mid;\\n        while (low < high) {\\n            mid = (low + high) / 2;\\n            if (a.get(mid) >= score) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return a.size() - low;\\n    }\\n\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"처음에 각 부문마다 나누어서 계산했더니 정확성은 통과했지만 효율성에서 실패했습니다.\", _jsx(_components.br, {}), \"\\n\", \"몇 번을 최적화했지만 실패했습니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서 다음으로 시도해본게 모든 경우의 수를 구하고 시도했습니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 점수를 넘는 사람을 찾을 때 선형탐색으로 구했더니 역시 시간초과였습니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서 이분탐색 라이브러리를 사용했는데 문제가 생겼습니다.\", _jsx(_components.br, {}), \"\\n\", \"이분탐색 라이브러리는 중복되는 값이 있는 경우 최저 인덱스를 구해주지 않습니다.\", _jsx(_components.br, {}), \"\\n\", \"중복 중에는 랜덤으로 인덱스를 구하게 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"여기서 문제를 찾느라 한참 걸렸습니다.\", _jsx(_components.br, {}), \"\\n\", \"좀만 더 하면 풀거 같은 아쉬운 마음에 너무 시간을 많이 잡아먹은 문제였습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"순위 검색"},"__N_SSG":true}
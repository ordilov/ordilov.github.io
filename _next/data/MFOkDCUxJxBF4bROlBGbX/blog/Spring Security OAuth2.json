{"pageProps":{"postMetadata":{"layout":"post","title":"Spring Security OAuth2","date":"2022-02-06 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"Spring Security OAuth2"},"postContent":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      h2: \"h2\",\n      pre: \"pre\",\n      code: \"code\",\n      ol: \"ol\",\n      li: \"li\",\n      p: \"p\",\n      h3: \"h3\",\n      ul: \"ul\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"OAuth2 Login\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"application.yml 설정하기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"spring:\\n  security:\\n    oauth2:\\n      client:\\n        registration:\\t\\n          google:\\t\\n            client-id: google-client-id\\n            client-secret: google-client-secret\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"spring.security.oauth2.client.registration 까지 고정적으로 쓰이는 속성입니다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"google\"\n          }), \" 처럼 고정된 id에 따라 OAuth2 인증을 진행할 수 있습니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"OAuth2 인증 시 결과\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"OAuth2 로그인을 마치면 기본 개인정보를 받으면서 인증 세션이 연결됩니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"부가적인 설정\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"redirect uri 나 인증 방식 그리고 OAuth2 인증 범위등을 설정할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"redirect-uri: {baseUrl}/login/oauth2/code/{registrationId}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"redirectUri의 기본형식입니다. 그대로 입력하면 baseUrl에는 현재 주소가 들어갑니다.\\nregistrationId는 위에서 사용한 Id가 그대로 들어가게 됩니다.\\n따라서 redirectUri를 수정한다면 위의 템플릿을 이용해서 수정하면 됩니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"OAuth2 설정 오버라이드하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"OAuth2 설정을 오버라이드하는 방법에는 3가지가 있습니다.\\n그 중에서 스프링을 사용한다면 2가지 방법을 사용하게 됩니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"ClientRegistrationRepository @Bean\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@Configuration\\npublic class OAuth2LoginConfig {\\n\\n\\t@Bean\\n\\tpublic ClientRegistrationRepository clientRegistrationRepository() {\\n\\t\\treturn new InMemoryClientRegistrationRepository(this.googleClientRegistration());\\n\\t}\\n\\n\\tprivate ClientRegistration googleClientRegistration() {\\n\\t\\treturn ClientRegistration.withRegistrationId(\\\"google\\\")\\n\\t\\t\\t.clientId(\\\"google-client-id\\\")\\n\\t\\t\\t.clientSecret(\\\"google-client-secret\\\")\\n\\t\\t\\t.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\\n\\t\\t\\t.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\\n\\t\\t\\t.redirectUri(\\\"{baseUrl}/login/oauth2/code/{registrationId}\\\")\\n\\t\\t\\t.scope(\\\"openid\\\", \\\"profile\\\", \\\"email\\\", \\\"address\\\", \\\"phone\\\")\\n\\t\\t\\t.authorizationUri(\\\"https://accounts.google.com/o/oauth2/v2/auth\\\")\\n\\t\\t\\t.tokenUri(\\\"https://www.googleapis.com/oauth2/v4/token\\\")\\n\\t\\t\\t.userInfoUri(\\\"https://www.googleapis.com/oauth2/v3/userinfo\\\")\\n\\t\\t\\t.userNameAttributeName(IdTokenClaimNames.SUB)\\n\\t\\t\\t.jwkSetUri(\\\"https://www.googleapis.com/oauth2/v3/certs\\\")\\n\\t\\t\\t.clientName(\\\"Google\\\")\\n\\t\\t\\t.build();\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"빈을 등록해서 기본적으로 설정되어 있는 구성들을 변경할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"WebSecurityConfigurerAdapter\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n\\t@Override\\n\\tprotected void configure(HttpSecurity http) throws Exception {\\n\\t\\thttp\\n\\t\\t\\t.authorizeHttpRequests(authorize -> authorize\\n\\t\\t\\t\\t.anyRequest().authenticated()\\n\\t\\t\\t)\\n\\t\\t\\t.oauth2Login(withDefaults());\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"좀 더 범용적으로 쓰이는 WebSecurityConfigurerAdapter를 사용할 수 있습니다.\\noauth2Login()에 변경할 내용들을 추가해주면 됩니다. 두 개를 같이 사용하는 방법도 있습니다.\\n먼저 oauth2Login()에서 변경할 수 있는 구성 요소들입니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n\\t@Override\\n\\tprotected void configure(HttpSecurity http) throws Exception {\\n\\t\\thttp\\n\\t\\t\\t.oauth2Login(oauth2 -> oauth2\\n\\t\\t\\t    .authorizationEndpoint(authorization -> authorization\\n\\t\\t\\t            ...\\n\\t\\t\\t    )\\n\\t\\t\\t    .redirectionEndpoint(redirection -> redirection\\n\\t\\t\\t            ...\\n\\t\\t\\t    )\\n\\t\\t\\t    .tokenEndpoint(token -> token\\n\\t\\t\\t            ...\\n\\t\\t\\t    )\\n\\t\\t\\t    .userInfoEndpoint(userInfo -> userInfo\\n\\t\\t\\t            ...\\n\\t\\t\\t    )\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Authorization Endpoint: 클라이언트가 인증을 위해 접속하는 곳입니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Token Endpoint: 클라이언트가 접근 토큰으로 인가를 받는 곳입니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Redirection Endpoint: 인증 서버에서 인증 정보를 담은 결과를 보낼 곳입니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"UserInfo Endpoint: 인증정보로 user에 대한 정보를 처리하는 곳입니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Login 페이지 처리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Spring Security를 사용하면 기본적으로 로그인 페이지로 id, password 폼 창이 나옵니다.\\nOAuth2-Client를 설정하고 yml에 등록된 OAuth2 id가 있다면 소셜 로그인 페이지로 바뀝니다.\\n이런 Login Page처리는 \", _jsx(_components.code, {\n          children: \"DefaultLoginPageGeneratingFilter\"\n        }), \"에서 이뤄집니다.\\n각 이름은 등록된 \", _jsx(_components.code, {\n          children: \"ClientRegistration.clientName\"\n        }), \"으로 표시됩니다.\\n각 링크는 \", _jsx(_components.code, {\n          children: \"OAuth2AuthorizationRequestRedirectFilter.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI + \\\"/{registrationId}\\\"\"\n        }), \"이 됩니다.\\n예를 들면 \", _jsx(_components.code, {\n          children: \"/oauth2/authorization/google\"\n        }), \" 방식으로 구성됩니다.\\n이런 로그인 페이지를 수정하려면 위치를 수정하려면 oauth2Login()에서 수정합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n\\t@Override\\n\\tprotected void configure(HttpSecurity http) throws Exception {\\n\\t\\thttp\\n\\t\\t\\t.oauth2Login(oauth2 -> oauth2\\n\\t\\t\\t    .loginPage(\\\"/login/oauth2\\\")\\n\\t\\t\\t    ...\\n\\t\\t\\t    .authorizationEndpoint(authorization -> authorization\\n\\t\\t\\t        .baseUri(\\\"/login/oauth2/authorization\\\")\\n\\t\\t\\t        ...\\n\\t\\t\\t    )\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Redirection Endpoint\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"기본적으로 OAuth2 응답 uri는 \", _jsx(_components.code, {\n          children: \"/login/oauth2/code/*\"\n        }), \"로 설정되어 있습니다.\\n이 정보는 \", _jsx(_components.code, {\n          children: \"OAuth2LoginAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI\"\n        }), \"에 정의되어 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n\\t@Override\\n\\tprotected void configure(HttpSecurity http) throws Exception {\\n\\t\\thttp\\n\\t\\t\\t.oauth2Login(oauth2 -> oauth2\\n\\t\\t\\t    .redirectionEndpoint(redirection -> redirection\\n\\t\\t\\t        .baseUri(\\\"/login/oauth2/callback/*\\\")\\n\\t\\t\\t        ...\\n\\t\\t\\t    )\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"원하는 redirectUri로 수정하려면 위처럼 수정하면 가능합니다.\\n당연히 각 OAuth2 페이지에서 설정한 redirectUri 와 일치해야 합니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"UserInfo Endpoint\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Mapping User Authorities\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"OAuth2 에서 받은 인증 정보로 사용자마다 권한을 부여할 수 있습니다.\\n기본적으로 OAuth2 에서 제공되는 Authority는 \", _jsx(_components.code, {\n          children: \" OAuth2User.getAuthorities()\"\n        }), \"에서 제공됩니다.\\n이 정보를 가지고 GrantedAuthority에 권한들을 매치시켜야 합니다.\\n그리고 이런 권한은 OAuth2AuthenticationToken에 제공됩니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Using a GrantedAuthoritiesMapper\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"GrantedAuthorityMapper 구현체를 만들어 매핑시킬 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n\\t@Override\\n\\tprotected void configure(HttpSecurity http) throws Exception {\\n\\t\\thttp\\n\\t\\t\\t.oauth2Login(oauth2 -> oauth2\\n\\t\\t\\t    .userInfoEndpoint(userInfo -> userInfo\\n\\t\\t\\t        .userAuthoritiesMapper(this.userAuthoritiesMapper())\\n\\t\\t\\t        ...\\n\\t\\t\\t    )\\n\\t\\t\\t);\\n\\t}\\n\\n\\tprivate GrantedAuthoritiesMapper userAuthoritiesMapper() {\\n\\t\\treturn (authorities) -> {\\n\\t\\t\\tSet<GrantedAuthority> mappedAuthorities = new HashSet<>();\\n\\n\\t\\t\\tauthorities.forEach(authority -> {\\n\\t\\t\\t\\tif (OidcUserAuthority.class.isInstance(authority)) {\\n\\t\\t\\t\\t\\tOidcUserAuthority oidcUserAuthority = (OidcUserAuthority)authority;\\n\\n\\t\\t\\t\\t\\tOidcIdToken idToken = oidcUserAuthority.getIdToken();\\n\\t\\t\\t\\t\\tOidcUserInfo userInfo = oidcUserAuthority.getUserInfo();\\n\\n\\t\\t\\t\\t\\t// Map the claims found in idToken and/or userInfo\\n\\t\\t\\t\\t\\t// to one or more GrantedAuthority's and add it to mappedAuthorities\\n\\n\\t\\t\\t\\t} else if (OAuth2UserAuthority.class.isInstance(authority)) {\\n\\t\\t\\t\\t\\tOAuth2UserAuthority oauth2UserAuthority = (OAuth2UserAuthority)authority;\\n\\n\\t\\t\\t\\t\\tMap<String, Object> userAttributes = oauth2UserAuthority.getAttributes();\\n\\n\\t\\t\\t\\t\\t// Map the attributes found in userAttributes\\n\\t\\t\\t\\t\\t// to one or more GrantedAuthority's and add it to mappedAuthorities\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn mappedAuthorities;\\n\\t\\t};\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Delegation-based strategy with OAuth2UserService\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"GrantedAuthoritiesMapper 대신 OAuth2UserService를 구현할 수 있습니다.\\n입력값으로는 OAuth2UserRequest에서 OAuth2AccessToken을 받아올 수 있습니다.\\n이 과정에서 사용자에게 인증 정보를 처리하기 전에 접근 토큰으로 인증 정보를 불러올 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-java\",\n          children: \"@EnableWebSecurity\\npublic class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {\\n\\n\\t@Override\\n\\tprotected void configure(HttpSecurity http) throws Exception {\\n\\t\\thttp\\n\\t\\t\\t.oauth2Login(oauth2 -> oauth2\\n\\t\\t\\t    .userInfoEndpoint(userInfo -> userInfo\\n\\t\\t\\t        .userService(this.oauth2UserService())\\n\\t\\t\\t        ...\\n\\t\\t\\t    )\\n\\t\\t\\t);\\n\\t}\\n\\n\\tprivate OAuth2UserService<OAuth2UserRequest, OAuth2User> oauth2UserService() {\\n\\t\\t...\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"DefaultOAuth2UserService\"\n        }), \"는 OAuth2UserService의 구현체입니다.\\n기본적으로 RestTemplate을 이용해 토큰에서 인증 정보를 불러오는 역할을 담당합니다.\\n이렇게 받아온 인증 정보로 \", _jsx(_components.code, {\n          children: \"AuthenticatedPrincipal\"\n        }), \"을 반환합니다.\\n인증 처리 과정을 바꾸는 방법은 두 가지입니다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"직접 OAuth2UserService 구현하기\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"DefaultOAuth2UserService에서 제공하는 set함수에 파라미터 제공하기\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"id":"Spring Security OAuth2"},"__N_SSG":true}
{"pageProps":{"metadata":{"title":"Union Find","date":"2022-01-02 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"Union Find"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      br: \"br\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      ul: \"ul\",\n      li: \"li\",\n      span: \"span\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Disjoint Set\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Disjoint Set은 상호 배타적 집합으로 서로 구분되는 집합입니다.\\n각 집합은 중복되지 않은 원소의 집합으로 구성되어 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"Disjoint Set은 여러 자료구조로 표현할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"배열로 표현하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"가장 단순한 방법은 배열로 표현하는 것입니다.\", _jsx(_components.br, {}), \"\\n\", \"시작은 크기가 1인 집합으로 자신의 값에 해당하는 위치를 표현합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"arr[i] = i;\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이후에 합쳐질 때마다 값을 바꿔주면 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"예를 들어 집합을 나타내는 기준을 더 작은 값이라고 두겠습니다.\", _jsx(_components.br, {}), \"\\n\", \"1, 3, 5가 같은 집합이라면 배열의 1, 3, 5번은 1이 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"이런 식으로 구하다보면 제일 작은 기준으로 집합이 나눠집니다.\", _jsx(_components.br, {}), \"\\n\", \"이때 찾는데 걸리는 시간은 배열 값을 보면 되므로 O(1)입니다.\", _jsx(_components.br, {}), \"\\n\", \"문제는 합치는 데 걸리는 시간은 O(N)이 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"두 수가 주어질 때 다른 점들이 어느 집합에 있는지 모르기 때문에 전체를 돌아야 합니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서 찾는 시간은 빠르지만 이 방법보단 다른 방법을 사용합니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"트리로 표현하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"트리로 사용할 때는 자신의 부모를 따라 올라가 루트로 집합을 비교합니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 찾기 연산은 루트를 찾는데 걸리는 시간이 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"합칠 때 두 집합의 루트 중 하나를 다른 하나의 루트로 만들면 되므로 배열보다 시간이 줄어듭니다.\", _jsx(_components.br, {}), \"\\n\", \"이 때 찾기 연산은 잘 분포되어있다면 트리가 그렇듯 O(logN)이 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 균등하게 분포되어 있지않다면 O(N)이 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Union FInd\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Disjoint Set을 구현할 때 세 가지 연산이 필요합니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"초기화 : 크기가 1인 원소들의 집합으로 초기화\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"찾기 : 집합의 루트 찾기\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"합치기 : 두 집합이 연결되어 있을 때 합치기\\n여기서 찾기와 합치는 연산이 대표적이기에 Union Find라고 부릅니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.ArrayList;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.List;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// 트리를 이용해 상호 배타적 집합을 구현한다.\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"NaiveDisjointSet\"\n          }), \" {\\n    List<Integer> parent;\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"NaiveDisjointSet\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" n)\"]\n          }), \"{\\n        \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".parent = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ArrayList\"\n          }), \"<>();\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"i\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"; i < n; i++){\\n            parent.add(i);\\n        }\\n    }\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// u가 속한 트리의 루트를 반환한다.\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"find\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" u)\"]\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(u == parent.get(u)) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" u;\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" find(parent.get(u));\\n    }\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// u가 속한 트리와 v가 속한 트리를 합친다.\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"merge\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" u, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" v)\"]\n          }), \"{\\n        u = find(u);\\n        v = find(v);\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// u와 v가 이미 같은 트리에 속하는 경우를 걸러낸다.\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(u == v) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n        parent.set(u, v);\\n    }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"간단하게 만드는 경우 문제는 불균형하게 분포되었을 때입니다.\", _jsx(_components.br, {}), \"\\n\", \"트리가 일직선으로 분포되는 경우로 시간 복잡도가 O(N)입니다.\", _jsx(_components.br, {}), \"\\n\", \"배열로 만들었을 때도 O(1)인 걸 생각하면 사용할 이유가 없습니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서 사용하는 방법은 트리의 높이를 비교해서 합칩니다.\", _jsx(_components.br, {}), \"\\n\", \"높은 트리가 낮은 트리의 부모가 된다면 일직선 분포를 막을 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.ArrayList;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.List;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// 트리를 이용해 상호 배타적 집합을 구현한다.\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"OptimizedDisjointSet\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"NaiveDisjointSet\"\n          }), \"{\\n\\n  List<Integer> rank;\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"OptimizedDisjointSet\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" n)\"]\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"super\"\n          }), \"(n);\\n    rank = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ArrayList\"\n          }), \"<>(n);\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"i\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"; i < n; i++)\\n      rank.add(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \");\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"find\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" u)\"]\n          }), \"{\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(u == parent.get(u)) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" u;\\n    parent.set(u, find(parent.get(u)));\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" parent.get(u);\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"merge\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" u, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" v)\"]\n          }), \" {\\n    u = find(u);\\n    v = find(v);\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(u == v) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \";\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(rank.get(u) > rank.get(v)){\\n      v = swap(u, u = v);\\n    }\\n    parent.set(u, v);\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(rank.get(u).equals(rank.get(v))){\\n      rank.set(v, rank.get(v));\\n    }\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// y = swap(x, x = y)\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"swap\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" a, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" b)\"]\n          }), \"{\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" a;\\n  }\\n}\\n\"]\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
{"pageProps":{"metadata":{"layout":"post","title":"[프로그래머스] 가장 먼 노드 (JAVA)","date":"2022-01-05 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"가장 먼 노드"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h3: \"h3\",\n      p: \"p\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.*;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Solution\"\n          }), \" {\\n    \\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"boolean\"\n          }), \"[] visited;\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \"[] distances;\\n    \\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"solution\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" n, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \"[][] edge)\"]\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"answer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \";\\n        List<List<Integer>> graph = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ArrayList\"\n          }), \"<>();\\n        visited = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"boolean\"\n          }), \"[n+\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"];\\n        distances = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"int\"\n          }), \"[n+\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"];\\n        Arrays.fill(distances, \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"20001\"\n          }), \");\\n        distances[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"] = \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \";\\n        visited[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"] = \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \";\\n        \\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"i\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"; i <= n; i++){\\n            graph.add(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ArrayList\"\n          }), \"<>());\\n        }\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \"[] e : edge){\\n            graph.get(e[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"]).add(e[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"]);\\n            graph.get(e[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"]).add(e[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"]);\\n        }\\n        \\n        PriorityQueue<Node> queue = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"PriorityQueue\"\n          }), \"<>();\\n        queue.add(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Node\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"));\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"max\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \";\\n        \\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"while\"\n          }), \"(!queue.isEmpty()){\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Node\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"now\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" queue.poll();\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"dist\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" now.dist;\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"to\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" now.to;\\n            distances[to] = Math.min(distances[to], dist + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \");\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(distances[to] > max){\\n                max = distances[to];\\n                answer = \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \";\\n            } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(distances[to] == max){\\n                answer++;\\n            }\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" i : graph.get(to)){\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \"(visited[i]) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"continue\"\n          }), \";\\n                visited[i] = \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \";\\n                queue.add(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Node\"\n          }), \"(i, dist + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"));\\n            } \\n        }\\n \\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" answer;\\n    }\\n    \\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Node\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"implements\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Comparable\"\n          }), \"<Node>{\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" to;\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" dist;\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"Node\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" to, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" dist)\"]\n          }), \"{\\n            \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".to = to;\\n            \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".dist = dist;\\n        }\\n        \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"compareTo\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Node n)\"\n          }), \"{\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".dist - n.dist;\\n        }\\n    }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"처음 풀었을 때 플로이드 방식을 풀었더니 메모리 초과 + 시간초과가 나왔습니다.\", _jsx(_components.br, {}), \"\\n\", \"그래서 그래프 자료구조를 연결 리스트로 바꾸고 bfs 방식으로 탐색했습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
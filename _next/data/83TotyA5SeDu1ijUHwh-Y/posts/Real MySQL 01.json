{"pageProps":{"metadata":{"title":"Real MySQL 8.0 (1)","date":"2022-03-05 00:01:00 +0900","category":"book","tags":["book"],"keywords":["book"],"id":"Real MySQL 01"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h3: \"h3\",\n      ol: \"ol\",\n      li: \"li\",\n      strong: \"strong\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"1. MySQL 소개\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"DBMS를 선택하는 기준 중 첫 번째는 \\\"자기가 가장 잘 활용할 수 있는 DBMS\\\"입니다.\\n그 다음으로는 안정성, 성능, 인지도가 있습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"2. 설치와 설정\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"비밀번호가 없는 관리자 계정 유저 생성하기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-shell\",\n          children: \"mysqld --defaults-file=/etc/my.cnf --initialize-insecure\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"시작과 종료\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-shell\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta prompt_\",\n            children: \"#\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"# 서버 시작\"\n            })\n          }), \"\\nsystemctl start mysqld\\n\", _jsx(_components.span, {\n            className: \"hljs-meta prompt_\",\n            children: \"\\n#\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"# 서버 상태 확인\"\n            })\n          }), \"\\nsystemctl status mysqld\\nps -ef | grep mysqld\\n\", _jsx(_components.span, {\n            className: \"hljs-meta prompt_\",\n            children: \"\\n#\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"# 서버 종료\"\n            })\n          }), \"\\nsystemctl stop mysqld\\n\", _jsx(_components.span, {\n            className: \"hljs-meta prompt_\",\n            children: \"\\n#\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"# 원격 종료\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta prompt_\",\n            children: \"mysql> \"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: \"SHUTDOWN;\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"클라이언트 없이 서버 연결 테스트\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-shell\",\n          children: [\"telnet 23.3.3.2 3306\\n\", _jsx(_components.span, {\n            className: \"hljs-meta prompt_\",\n            children: \"\\n#\"\n          }), _jsx(_components.span, {\n            className: \"bash\",\n            children: _jsx(_components.span, {\n              className: \"hljs-comment\",\n              children: \"# Netcat 으로 확인\"\n            })\n          }), \"\\nnc 23.3.3.2 3306\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"서버 설정\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"/etc/my.cnf\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"/etc/mysql/my.cnf\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"/usr/etc/my.cnf\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"~/my.cnf\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"다음 순서로 설정 파일을 찾으며 설정 파일이 다 있는 경우 어느 설정 파일을 참조했는지 찾을 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-shell\",\n          children: \"mysqld --verbose --help\\n\\nmysql --help \\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"시스템 변수 확인\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SHOW\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GLOBAL\"\n          }), \" VARIABLES;\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"글로벌 변수 & 세션 변수\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"글로벌 변수는 서버 인스턴스에서 전체적으로 영향을 미칩니다.\\n세션 변수는 각 클라이언트별로 유지되며 접속하면 기본값, 변경하면 세션별로 유지됩니다.\\n즉 커넥션 단위로 다른 값으로 변경이 가능한 값입니다.\\n예를 들면 \", _jsx(_components.code, {\n          children: \"autocommit\"\n        }), \" 변수가 세션 변수입니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"정적 변수 & 동적 변수\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"서버가 기동 중인 상태에서 변경 가능하냐에 따라 동적과 정적으로 구분됩니다.\\n변수는 설정 파일에서 기본적으로 불러오는데 기동 중에는 재시작 전에 변수가 변경되지 않습니다.\\n변수를 확인할 수 있는 방법은 명령어로 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SHOW\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GLOBAL\"\n          }), \" VARIABLES \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"LIKE\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'$max_connections$'\"\n          }), \";\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SET\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GLOBAL\"\n          }), \" max_connections\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"500\"\n          }), \";\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"GLOBAL 변수의 경우 GLOBAL을 붙이면 되고 아닌 경우 자동으로 세션 변수입니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"SET PERSIST\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"SET을 통해 GLOBAL 변수를 교체하더라도 서버를 재시작하면 변경되지 않습니다.\\n그 이유는 설정 파일에는 변경사항이 적용되지 않기 때문입니다.\\n적용하려면 PERSIST 명령어가 필요합니다.\\n반대로 삭제하려는 경우 RESET 명령어로 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SET\"\n          }), \" PERSIST max_connections\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"5000\"\n          }), \";\\n\\nRESET PERSIST max_connections;\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"3. 사용자 및 권한\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"MySQL에서는 사용자와 호스트명도 함께 계정의 일부가 됩니다.\\n사용자와 호스트명은 따옴표로 감싸서 표현합니다.\\n호스트의 경우 %를 통해 모든 IP나 모든 호스트명을 표현 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-go\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"`svc_id`\"\n          }), \"@\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"`127.0.0.1`\"\n          }), \" \\n\\n\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"`svc_id`\"\n          }), \"@\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"`%`\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"CREATE USER\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"사용자를 생성할 때 \", _jsx(_components.code, {\n          children: \"CREATE USER\"\n        }), \"로 가능하며 여러 옵션이 있습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"IDENTIFIED WITH\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"비밀번호 인증 방식을 사용하는 경우 \", _jsx(_components.code, {\n          children: \"password\"\n        }), \"를 함께 명시해야 합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [\"IDENTIFIED \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"WITH\"\n          }), \" `mysql_native_password` \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"BY\"\n          }), \" `password`\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"MYSQL 8.0 MySQL 8.0 버전부터 Caching SHA-2 Authentication이 기본 인증 방식입니다.\", _jsx(_components.br, {}), \"\\n\", \"따라서 이 방식은 SSL 또는 RSA 키페어가 필요합니다.\\nMYSQL 8.0 에서도 비밀번호를 기본 인증 방식으로 바꾸려면 설정 파일을 바꿔야 합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SET\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GLOBAL\"\n          }), \" default_authentication_plugin\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \"\\\"mysql_native_password\\\"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"REQUIRE\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"SSL/TLS 채널을 사용할지 여부를 결정하는 옵션입니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"이중 비밀번호\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"응용 프로그램에서 데이터베이스 서버를 공용으로 사용하고 있는 경우가 많습니다.\\n이런 특성 떄문에 데이터베이스 서버의 계정 정보는 쉽게 변경하기 어렵고 서비스가 실행중일 때는 불가능합니다.\\n그래서 처음 설정한 비밀번호를 오래 사용하는 경우가 많습니다.\\n보안을 위해서 주기적으로 바꿔주려면 서비스를 모두 멈추지 않고서는 불가능한 일이었습니다.\\n이 같은 문제점을 해결하기 위해 8.0 버전 부터는 비림번호를 2개를 동시에 사용 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"-- // old_password로 비밀번호 설정\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ALTER\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"USER\"\n          }), \" `root`@`localhost` IDENTIFIED \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"BY\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'old_password'\"\n          }), \";\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"-- // 비밀번호를 \\\"qwerty\\\"로 변경하면서 기존 비밀번호를 세컨더리로 변경\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ALTER\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"USER\"\n          }), \" `root`@`localhost` IDENTIFIED \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"BY\"\n          }), \" `new_password` RETAIN \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"CURRENT\"\n          }), \" PASSWORD;\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"최근 설정된 비밀번호는 프라이머리로, 이전 비밀번호는 세컨더리 비밀번호가 됩니다.\\n변경한 이후에 사용중이던 서비스들에서 재시작마다 \", _jsx(_components.code, {\n          children: \"new_password\"\n        }), \"로 변경하면 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"모든 서비스가 변경되고 나면 세컨더리 비밀번호에서 \", _jsx(_components.code, {\n          children: \"old_password\"\n        }), \"를 삭제하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ALTER\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"USER\"\n          }), \" `root`@`localhost` DISCARD OLD_PASSWORD;\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"권한(Privilege)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"MySQL 8.0에서 권한은 글로벌, 객체, 동적 권한으로 구분됩니다.\\n데이터베이스, 테이블 이외의 객체에 적용되는 권한은 \", _jsx(_components.code, {\n          children: \"글로벌 권한\"\n        }), \"입니다.\\n객체 권한은 데이터베이스와 테이블에 해당하며 권한을 부여할 객체를 반드시 명시해야 합니다.\\nALL을 명시하는 경우 객체는 객체에 적용되는 모든 권한을, 글로벌은 글로벌 수준에서 모든 권한을 부여합니다.\\n미리 소스코드에 명시되어 있는 권한들은 정적 권한이라고 하며, 플러그인이나 추가로 등록되는 권한은 동적 권한입니다.\\n권하능ㄹ 부여할 때는 \", _jsx(_components.code, {\n          children: \"GRANT\"\n        }), \" 명령어를 이용합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GRANT\"\n          }), \" privilege_list \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ON\"\n          }), \" db.table \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TO\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'user'\"\n          }), \"@\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'host'\"\n          }), \";\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"글로벌 권한의 경우 특정 대상에 부여될 수 없기 때문에 on 절에 항상 \", _jsx(_components.code, {\n          children: \"*.*\"\n        }), \"을 이용합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GRANT\"\n          }), \" EVENT \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ON\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"*\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TO\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'user'\"\n          }), \"@\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'localhost'\"\n          }), \";\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"역할(ROLE)\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"MySQL 8.0 부터는 권한들을 묶어서 역할로 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"CREATE\"\n          }), \" ROLE\\n    role_emp_read,\\n    role_emp_write;\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"role_emp_read와 role_emp_write 역할을 생성했지만 아직 어떤 권한도 없는 껍데기입니다.\\nGRANT 명ㄹ령을 통해 실질적인 권한을 부여할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GRANT\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SELECT\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ON\"\n          }), \" employess.\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"*\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TO\"\n          }), \" role_emp_read;\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"역할을 계정에 부여하는 방법은 GRANT 명령어로 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"GRANT\"\n          }), \" role_emp_read \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"TO\"\n          }), \" reader@`\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"127.0\"\n          }), _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \".0\"\n          }), _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \".1\"\n          }), \"`;\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"역할에 부여되어 있는 권한은 \", _jsx(_components.code, {\n          children: \"SHOW GRANTS\"\n        }), \"로 확인 가능합니다.\\n현재 계정의 역할을 확인은 \", _jsx(_components.code, {\n          children: \"SELECT current_role()\"\n        }), \"로 가능합니다.\\n하지만 만든 상태에서 사용하려고하면 권한이 없다는 에러를 만나게 됩니다.\\n역할을 사용하려면 \", _jsx(_components.code, {\n          children: \"SET ROLE\"\n        }), \" 명령어로 역할을 활성화해야 합니다.\\n로그아웃하고 다시 로그인하면 다시 활성화되지 않은 상태가 됩니다.\\n만약 로그인마다 역할을 자동으로 활성화하려면 옵션을 활성화해야 합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"SET\"\n          }), \" activate_all_roles_on_login\", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"ON\"\n          }), \";\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"mysql에서 user테이블을 살펴보면 역할과 사용자가 구분없이 저장되어 있습니다.\\n다만 역할들은 account_locked 칼럼의 값이 Y으로 되어 있습니다.\\n그리고 host는 %로 모든 호스트가 자동으로 추가됩니다.\\n따라서 역할을 부여하면 다른 계정과 권한을 합치는 것으로 처리됩니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
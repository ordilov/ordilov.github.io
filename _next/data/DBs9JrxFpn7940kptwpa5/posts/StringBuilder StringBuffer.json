{"pageProps":{"metadata":{"title":"StringBuilder StringBuffer","date":"2022-03-22 00:45:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"StringBuilder StringBuffer"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      h2: \"h2\",\n      p: \"p\",\n      strong: \"strong\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h4: \"h4\",\n      ul: \"ul\",\n      li: \"li\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"String, StringBuilder, StringBuffer\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"String 부터 알아보기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"StringBuilder와 StringBuffer는 모두 String 조작을 도와주는 클래스입니다.\\n간단한 +, - 같은 연산자로도 String 조작이 가능하지만 효율성이 좋지 않습니다.\\n그 이유는 String은 \", _jsx(_components.strong, {\n          children: \"불변 객체\"\n        }), \"이기 때문입니다.\\nString이 어떻게 불변 객체로 관리 되는지부터 살펴보겠습니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"String 관리\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"String도 primitive 타입이 아닌 클래스이기 때문에 당연히 primitive 타입으로 구성됩니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-arduino\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"byte\"\n          }), \"[] value;\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"기능이 더 많지만 String을 단순하게 보면 byte 배열입니다.\\nfinal로 선언되어 생성 이후에 수정할 수 없는 것을 알 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그렇다면 final로 수정이 불가능한데 어떻게 이런 코드가 가능할까요?\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"String \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"apple\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"appl\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\napple += \\\"e\\\"\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이 코드는 Java compiler에 의해 이것과 비슷하게 바뀝니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"String \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"apple\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"appl\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"apple\"\n          }), \" = new StringBuilder(apple).append(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"e\\\"\"\n          }), \").toString()\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"다시 말하면 \", _jsx(_components.code, {\n          children: \"String\"\n        }), \" 연산은 내부적으로 \", _jsx(_components.code, {\n          children: \"StringBuidler(StringBuffer)\"\n        }), \" 와 같은 구현을 사용합니다.\\n같은 구현을 사용하는데 왜 연산을 할 때 \", _jsx(_components.code, {\n          children: \"tringBuilder\"\n        }), \"가 더 효율적이라고 할까요?\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"String 메모리 관리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"StringBuilder가 더 효율적인 이유는 시간에서가 아니라 메모리상의 이유입니다.\\n그 이유를 알기 위해선 String이 어떻게 메모리에서 관리되는지 알아야 합니다.\\nString은 내부적으로 힙 메모리에서 \", _jsx(_components.code, {\n          children: \"Constant Pool\"\n        }), \"에서 관리됩니다.\\n\\\"apple\\\" 같은 리터럴 문자를 힙 메모리에서 공유해서 사용하게 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"String \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"a\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"apple\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\nString \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"b\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"apple\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\\nassertEquals(\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"a\"\n          }), \" == b)\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"서로 다른 객체를 생성했더라도 같은 리터럴 문자열을 가리키면 주소값은 같게 됩니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여기서 \\\"appl\\\" 에서 \\\"e\\\"를 더했을 때 a의 주소값은 \\\"apple\\\"을 가리키는 b와 같아지게 됩니다.\\n계산해서 나온 \\\"apple\\\" 이라는 문자열이 \", _jsx(_components.code, {\n          children: \"Constant Pool\"\n        }), \"에 올라가고 그 주소를 가리키게 되서입니다.\\n문제는 String은 불변 객체이기에 \\\"appl\\\"은 남아있다는 점입니다.\\n\\\"apple\\\"은 StringBuilder에 의해서 새로 만들어진 문자열입니다.\\n따라서 ConstantPool 에는 \\\"appl\\\" 과 \\\"apple\\\" 둘 다 존재하게 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"String \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"a\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"appl\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\nString \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"b\"\n          }), \" = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"apple\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\na += \\\"e\\\"\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\\nassertEquals(\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"a\"\n          }), \" == b)\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"즉 String 자체로 연산을 하다보면 Constant Pool에 사용하지 않는 문자열들이 쌓이게 됩니다.\\n그렇다면 StringBuilder는 어떻게 관리할까요?\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"StringBuilder 메모리 관리\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"StringBuilder도 String 처럼 byte 배열로 이루어져있습니다.\\n하지만 차이점이라면 final이 없다는 점입니다.\\n즉 생성 이후에도 값이 변경될 수 있다는 걸 의미합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"byte\", _jsx(_components.span, {\n            className: \"hljs-section\",\n            children: \"[]\"\n          }), \" value\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"StringBuilder에서 가장 핵심적인 기능은 \", _jsx(_components.code, {\n          children: \"insert\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"append\"\n        }), \"입니다.\\n둘 다 String을 추가하는 기능을 맡고 있습니다.\\n간단하게 생각하면 함수 인자로 들어온 문자열들을 받아와 원하는 배열 위치에 넣어줍니다.\\n하지만 배열이라 크기가 고정되어있기 때문에 크기가 더 커지는 경우 자동으로 배열을 새로 할당 받아 큰 배열에 문자열들을 복사해오는 기능을 맡습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"여기까지 정리해보면 StringBuilder는 연산마다 힙 메모리에 문자열을 올리는 게 아닌, 객체에 byte 배열에서 관리하고 있기 때문에 메모리 영역에서 효율적입니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"StringBuffer와의 차이\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"StringBuffer와 StringBuilder의 큰 차이점은 단 하나입니다.\\nStringBuffer는 \", _jsx(_components.code, {\n          children: \"Thread Safe\"\n        }), \" 하다는 점입니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"StringBuffer와 StringBuilder에서 핵심 기능인 \", _jsx(_components.code, {\n          children: \"append\"\n        }), \"로 비교해보겠습니다.\\n차이점이라면 toStringCache 라는 부분과 \", _jsx(_components.code, {\n          children: \"synchronized\"\n        }), \" 입니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-typescript\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// StringBuilder\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@HotSpotIntrinsicCandidate\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"StringBuilder\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"append\"\n          }), \"(\", _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"String\"\n            }), \" str\"]\n          }), \") {\\n \", _jsx(_components.span, {\n            className: \"hljs-variable hljs-language\",\n            children: \"super\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"append\"\n          }), \"(str);\\n \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable hljs-language\",\n            children: \"this\"\n          }), \";\\n}\\n\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// StringBuffer\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@HotSpotIntrinsicCandidate\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" synchronized \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"StringBuffer\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"append\"\n          }), \"(\", _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-built_in\",\n              children: \"String\"\n            }), \" str\"]\n          }), \") {\\n toStringCache = \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"null\"\n          }), \";\\n \", _jsx(_components.span, {\n            className: \"hljs-variable hljs-language\",\n            children: \"super\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"append\"\n          }), \"(str);\\n \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable hljs-language\",\n            children: \"this\"\n          }), \";\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"멀티 쓰레드 환경에서 안전하기 위해서 같은 기능을 하는 메서드에 \", _jsx(_components.code, {\n          children: \"synchronzied\"\n        }), \" 처리를 한 것 외에 크게 다른 게 없습니다. 실제로도 두 클래스는 모두 \", _jsx(_components.code, {\n          children: \"AbstractStringBuilder\"\n        }), \" 클래스를 상속받고 있으며 super.append() 처리시 그 클래스에서 실제 append가 실행됩니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"하지만 \", _jsx(_components.code, {\n          children: \"synchronzied\"\n        }), \" 때문에 동기화 처리를 위한 시간이 더 소모되고, 싱글 스레드 환경에서도 기본 메서드보다 속도가 저하됩니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"결론\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"문자열 연산이 많을 때\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"싱글스레드 환경\"\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"StringBuilder 사용\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"멀티스레드 환경\"\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"지역 변수인 경우 : StringBuilder 사용\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"인스턴스 변수, 클래스 변수인 경우 : StringBuffer 사용\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
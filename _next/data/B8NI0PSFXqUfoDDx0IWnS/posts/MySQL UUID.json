{"pageProps":{"metadata":{"title":"MySQL UUID","date":"2022-04-25 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"description":"MySQL에서 UUID를 처리해주는 방식을 알아봅니다.","id":"MySQL UUID"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      blockquote: \"blockquote\",\n      h3: \"h3\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"UUID\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"UUID(universally unique identifier)는 128비트 식별자입니다.\\n분산된 환경에서 고유한 식별자를 위해 특정 서버에 의존하지 않고, 매우 높은 확률로 중복되지 않는 식별자를 만들 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이렇게 생성하면 다음과 같은 장점들이 있습니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"서버를 거치거나 외부 통신 없이 고유한 식별자를 생성할 수 있습니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"값이 증가하거나 패턴이 있지 않아 ID를 추측해 처리하는 접근이 어려워집니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"반면 단점으로는 식별자를 저장하기 위해 128비트를 저장해야하는 문제가 있습니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"UUID를 만들 때는 각 언어에서 지원하는 UUID 생성 방법을 통해 만들 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"예시로 mysql에서 만드는 방법입니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"select\"\n          }), \" uuid()\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"java에서 만든다면 \", _jsx(_components.code, {\n          children: \"UUID.randomUUID()\"\n        }), \"로 만들 수 있으며 구현은 다음과 같습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" UUID \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"randomUUID\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SecureRandom\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"ng\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Holder.numberGenerator;\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"byte\"\n          }), \"[] randomBytes = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"byte\"\n          }), \"[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"16\"\n          }), \"];\\n    ng.nextBytes(randomBytes);\\n    randomBytes[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"6\"\n          }), \"]  &= \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0x0f\"\n          }), \";  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"/* clear version        */\"\n          }), \"\\n    randomBytes[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"6\"\n          }), \"]  |= \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0x40\"\n          }), \";  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"/* set to version 4     */\"\n          }), \"\\n    randomBytes[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8\"\n          }), \"]  &= \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0x3f\"\n          }), \";  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"/* clear variant        */\"\n          }), \"\\n    randomBytes[\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8\"\n          }), \"]  |= \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0x80\"\n          }), \";  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"/* set to IETF variant  */\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"UUID\"\n          }), \"(randomBytes);\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"MySQL에서 저장할 때\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"UUID가 128비트 식별자라고 했지만 실제 글자 수는 36글자로 '-' 문자 4개로 구분되어 있습니다.\"\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"aab5d5fd-70c1-11e5-a4fb-b026b977eb28\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"그대로 MySQL에 저장하는 경우 36글자를 차지하게 되는데 \", _jsx(_components.code, {\n          children: \"char\"\n        }), \"이나 \", _jsx(_components.code, {\n          children: \"binary\"\n        }), \"처럼 문자열 타입에 저장합니다.\\n\", _jsx(_components.code, {\n          children: \"char\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \"binary\"\n        }), \"는 모두 문자를 저장하지만 binary의 경우는 바이트를 저장할 때 주로 쓰입니다.\\nUUID에서의 문자도 16진수형 숫자들의 문자이므로 \", _jsx(_components.code, {\n          children: \"char\"\n        }), \"보다 \", _jsx(_components.code, {\n          children: \"binary\"\n        }), \"로 바이트 형태로 저장하는 것이 더 어울립니다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"'-' 문자는 식별하는데 도움이 되지 않기 때문에 이 값을 빼고 저장하면 32글자, 16바이트로 압축할 수 있습니다.\\n이처럼 UUID값을 binary(16) 형태로 변환할 때, MySQL 8.0에서는 \", _jsx(_components.code, {\n          children: \"UUID_TO_BIN()\"\n        }), \" 함수를 제공합니다.\\n반대로 압축된 바이너리 값을 UUID 형태로 반환할 때는 \", _jsx(_components.code, {\n          children: \"BIN_TO_UUID()\"\n        }), \" 함수를 사용하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"참조\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://dev.mysql.com/blog-archive/mysql-8-0-uuid-support/\",\n          children: \"https://dev.mysql.com/blog-archive/mysql-8-0-uuid-support/\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://dev.mysql.com/blog-archive/storing-uuid-values-in-mysql-tables/\",\n          children: \"https://dev.mysql.com/blog-archive/storing-uuid-values-in-mysql-tables/\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
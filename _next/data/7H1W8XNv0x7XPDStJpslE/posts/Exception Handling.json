{"pageProps":{"metadata":{"layout":"post","title":"Exception Handling in Spring MVC","date":"2022-01-16 00:45:00 +0900","category":"spring","tags":["backend"],"keywords":["backend"],"id":"Exception Handling"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      br: \"br\",\n      h2: \"h2\",\n      img: \"img\",\n      ul: \"ul\",\n      li: \"li\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      strong: \"strong\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"Spring MVC의 예외 처리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Spring MVC에서 개발하다보면 예외 처리를 할 일이 많습니다.\", _jsx(_components.br, {}), \"\\n\", \"처리하는 방법에 정답이 있는 건 아니지만 어떻게 하면 좋을지 좋은 글이 있어 요약해봤습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Spring Boot\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Spring Boot를 사용한다면 기본 오류 페이지를 넣어주지 않아도 white label을 볼 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"하지만 당연히 오류가 생겼을 때 이런 화면을 보고 싶지는 않기 때문에 처리가 필요합니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n          src: \"/assets/img/error-page.png\",\n          alt: \"\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Spring 예외처리 옵션\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"먼저 Spring에서 예외처리를 할 수 있는 방법은 3가지가 있습니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Exception 별로 처리\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Controller 별로 처리\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Global 로 처리\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Exception 별로 처리\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"먼저 Excpetion 별로 어떤 에러 응답 코드를 반환할지 지정할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\" \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ResponseStatus(value=HttpStatus.NOT_FOUND, reason=\\\"No such Order\\\")\"\n          }), \"  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// 404\"\n          }), \"\\n \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"OrderNotFoundException\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"RuntimeException\"\n          }), \" {\\n     \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// ...\"\n          }), \"\\n }\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이제 Controller에서 위의 Exception을 throw하면 404 코드로 응답합니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Controller 별로 처리\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Controller\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ExceptionHandlingController\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// @RequestHandler methods\"\n          }), \"\\n  ...\\n  \\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Exception handling methods\"\n          }), \"\\n  \\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Convert a predefined exception to an HTTP Status code\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ResponseStatus(value=HttpStatus.CONFLICT,\\n                  reason=\\\"Data integrity violation\\\")\"\n          }), \"  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// 409\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExceptionHandler(DataIntegrityViolationException.class)\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"conflict\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Nothing to do\"\n          }), \"\\n  }\\n  \\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Specify name of a specific view that will be used to display the error:\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExceptionHandler({SQLException.class,DataAccessException.class})\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" String \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"databaseError\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Nothing to do.  Returns the logical view name of an error page, passed\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// to the view-resolver(s) in usual way.\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Note that the exception is NOT available to this view (it is not added\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// to the model) but see \\\"Extending ExceptionHandlerExceptionResolver\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// below.\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"databaseError\\\"\"\n          }), \";\\n  }\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Total control - setup a model and return the view name yourself. Or\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// consider subclassing ExceptionHandlerExceptionResolver (see below).\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExceptionHandler(Exception.class)\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" ModelAndView \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"handleError\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(HttpServletRequest req, Exception ex)\"\n          }), \" {\\n    logger.error(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Request: \\\"\"\n          }), \" + req.getRequestURL() + \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\" raised \\\"\"\n          }), \" + ex);\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"ModelAndView\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"mav\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ModelAndView\"\n          }), \"();\\n    mav.addObject(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"exception\\\"\"\n          }), \", ex);\\n    mav.addObject(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"url\\\"\"\n          }), \", req.getRequestURL());\\n    mav.setViewName(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"error\\\"\"\n          }), \");\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" mav;\\n  }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Controller에서 처리하는 경우 @ExceptionHandler로 처리가 가능합니다.\", _jsx(_components.br, {}), \"\\n\", \"@ExceptionHandler는 Controller안에 메서드에만 사용이 가능합니다.\", _jsx(_components.br, {}), \"\\n\", \"처리할 수 있는 방법은 여라가지가 있습니다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"@ResponseStatus로 예외 처리\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"지정된 page 반환\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"새로운 페이지에 error를 담아 반환\\n가장 일반적으로는 에러를 로그로 남기고 에러 정보를 담아 반환합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Global 로 처리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"@ControllerAdvice\"\n        }), _jsx(_components.br, {}), \"\\n\", \"컨트롤러 별로 처리릏 하면 동일한 예외 처리가 생기면 반복해서 작성하게 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"전역적으로 처리하려면 @ControllerAdvice를 이용합니다.\", _jsx(_components.br, {}), \"\\n\", \"@ControllerAdvice는 @ExceptionHandler, @ModelAttribute, @initBinder를 지원합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ControllerAdvice\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"GlobalControllerExceptionHandler\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ResponseStatus(HttpStatus.CONFLICT)\"\n          }), \"  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// 409\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExceptionHandler(DataIntegrityViolationException.class)\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"handleConflict\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Nothing to do\"\n          }), \"\\n    }\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"HandlerExceptionResolver\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"DispatcherServlet에 선언된 스프링 빈들은 HandlerExceptionResolver를 구현합니다.\", _jsx(_components.br, {}), \"\\n\", \"클래스 뜻대로 exception이 발생하면 처리되기 전에 되는 작업을 하는 클래스입니다.\", _jsx(_components.br, {}), \"\\n\", \"세 가지 resolver를 순서대로 거치게 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"ExceptionHandlerExceptionResolver\", _jsx(_components.br, {}), \"\\n\", \"@ExceptionHandler와 controlleradvice에서 처리되지 않은 예외들이 거칩니다.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"ResponseStatusExceptionResolver\", _jsx(_components.br, {}), \"\\n\", \"@ResponseStatus에서 처리되지 않은 예외들이 거칩니다.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"DefaultHandlerExceptionResolver\", _jsx(_components.br, {}), \"\\n\", \"표준 Spring 예외들을 변환하고 HTTP 상태 코드로 변환합니다.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"SimpleMappingExceptionResolver\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Spring에서는 기본적으로 제공하는 처리들이 있습니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"예외가 발생하는 클래스 이름 명시\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"예외처리에 해당하는 에러 페이지 명시\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"에러 로그\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"REST 처리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"예외에 대한 응답 값을 뷰가 아닌 데이터로 반환하고 싶을 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"이때 사용할 수 있는 방법은 @ResponseBody를 이용할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ResponseStatus(HttpStatus.BAD_REQUEST)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ExceptionHandler(MyBadDataException.class)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ResponseBody\"\n          }), \" ErrorInfo\\n\", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"handleBadRequest\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(HttpServletRequest req, Exception ex)\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ErrorInfo\"\n          }), \"(req.getRequestURL(), ex);\\n} \\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"전역적으로 처리하고 싶은 경우 @RestControllerAdvice를 사용합니다.\", _jsx(_components.br, {}), \"\\n\", \"@RestControllerAdvice는 @ControllerAdvice에 @ResponseBody만 더해진 어노테이션입니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"ResponseEntityExceptionHandler\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"전역적인 처리를 할 때 모든 예외처리를 다시 다 작성할 필요가 없습니다.\", _jsx(_components.br, {}), \"\\n\", \"Spring에서 기본적으로 처리하는 예외들을 ResponseEntityExceptionHandler을 상속해 사용가능합니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"출처\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc\",\n          children: \"exception-handling-in-spring-mvc\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
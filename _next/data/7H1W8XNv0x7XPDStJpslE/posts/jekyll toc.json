{"pageProps":{"metadata":{"layout":"post","title":"Jeykll 목차 추가하기","date":"2022-01-07 00:45:00 +0900","category":"blog","tags":["blog"],"keywords":["blog"],"type":"archive","id":"jekyll toc"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\",\n      h2: \"h2\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      a: \"a\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"TOC (Table of Contents)\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"목차를 영어로 TOC라고 부릅니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"gem 설치로 추가하기\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"plugin 추가하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Gemfile에 아래 명령어를 추가해줍니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ruby\",\n          children: [\"gem \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'jekyll-toc'\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"_config.yml 추가하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"플러그인 목록에 \", _jsx(_components.code, {\n          children: \"jekyll-toc\"\n        }), \"를 추가해줍니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"plugins:\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-bullet\",\n            children: \"-\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"jekyll-toc\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"toc 설정 추가하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"목차를 추가할 post 설정에 \", _jsx(_components.code, {\n          children: \"toc: true\"\n        }), \"를 추가합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yaml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"---\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"layout:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"post\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"toc:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"---\\n\"\n          })]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"사용하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"사용할 layout html에 toc를 추가해야합니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"전체에 다 적용될려면 default.html 에\", _jsx(_components.code, {\n          children: \"{{ content | toc }}\"\n        }), \" 를 추가합니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-html\",\n          children: \"{{ content | toc }}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"content와 연결된 형태가 아닌 따로 사용하는 경우 변수로 사용합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-html\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"gem 설치 없이하기\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"toc html 받아오기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/allejo/jekyll-toc/releases/tag/v1.2.0\",\n          children: \"jekyll toc\"\n        }), \" 에서 toc.html을 다운받습니다.\", _jsx(_components.br, {}), \"\\n\", \"toc.html파일을 _includes 폴더에 넣어줍니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"사용하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"사용할 html에 다음 태그를 추가해줍니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-html\",\n          children: \"{% include toc.html html=content %}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"toc를 옆에 추가하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"toc를 옆에 추가하려면 \", _jsx(_components.code, {\n          children: \"<aside>\"\n        }), \"에 넣어주면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-html\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"aside\"\n            }), \">\"]\n          }), \"\\n    {% include toc.html html=content %}   \\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"aside\"\n            }), \">\"]\n          }), \"\\n\"]\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
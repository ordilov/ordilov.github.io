{"pageProps":{"metadata":{"layout":"post","title":"Http 헤더 대소문자 구분","date":"2022-02-15 00:00:01 +0900","category":"web","tags":["backend"],"keywords":["backend"],"id":"Http 헤더 대소문자"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      a: \"a\",\n      hr: \"hr\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"대소문자 구분?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"정답은 Name는 구분하지 않고 Value는 상관 없습니다.\\n\", _jsx(_components.a, {\n          href: \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\",\n          children: \"RFC 2616\"\n        }), \"에 명시된 내용에 따르면 헤더는 \\\":\\\" 를 기준으로 name과 value로 구성되어 있습니다.\\n그리고 name은 대소문자를 구분하지 않는다고 명시되어 있습니다.\"]\n      }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n        children: \"당연한 내용일 수도 있지만 몰랐던 사실을 알게 된건 Httpheaders를 사용하면서였습니다.\\nJava에서 기본으로 제공하는 HttpHeaders는 기본 생성자가 private으로 인자를 넣어준 생성자만 접근가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.net.http.HttpHeaders\\n...\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"HttpHeaders\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \"{\\n...\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그렇지만 Spring에서 제공하는 HttpHeaders는 기본 생성자를 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.springframework.http.HttpHeaders;\\n...\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"HttpHeaders\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \"(CollectionUtils.toMultiValueMap(\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"LinkedCaseInsensitiveMap\"\n          }), \"<>(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"8\"\n          }), \", Locale.ENGLISH)));\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"LinkedCaseInsensitiveMap은 이름에서 보듯이 대소문자를 구분하지 않는 Map입니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"map.put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"value1\\\"\"\n          }), \");\\nmap.put(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Name\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"value2\\\"\"\n          }), \");\\n\\nSystem.out.println(map.get(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \"));      \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// 결과는 value2\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이런 자료구조를 사용하는 걸 봤을 때 http 헤더의 키는 대소문자를 구분하지 않는다고 예상할 수 있었습니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
{"pageProps":{"metadata":{"layout":"post","title":"JPA Date Auditing","date":"2022-02-01 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"JPA Audit"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      br: \"br\",\n      h3: \"h3\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"데이터베이스 타입 정하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"먼저 Auditing이 저장할 날짜의 데이터 타입을 정해야 합니다.\", _jsx(_components.br, {}), \"\\n\", \"MySQL을 기준으로 정하겠습니다.\", _jsx(_components.br, {}), \"\\n\", \"JPA DDL 생성을 이용하면 기본으로 DATETIME 으로 지정되고 설정으로 바꿀 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"MySQL Date Type\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"| Data Type | Value                 |\\n|-----------|-----------------------|\\n| DATE      | '0000-00-00'          |\\n| TIME      | '00:00:00'            |\\n| DATETIME  | '0000-00-00 00:00:00' |\\n| TIMESTAMP | '0000-00-00 00:00:00' |\\n| YEAR      | 0000                  |\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"DATE, TIME, YEAR 은 각각 보듯이 시간, 날짜, 년도에 따라 구분되어 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"DATETIME 과 TIMESTAMP 는 형식이 같은데 어떤 차이점이 있을까요?\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"DATETIME\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"'1000-01-01 00:00:00.000000' ~ '9999-12-31 23:59:59.999999' 까지의 범위를 가집니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"타임존에 상관 없이 그대로 저장됩니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"TIMESTAMP\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"'1970-01-01 00:00:01.000000' ~ '2038-01-19 03:14:07.999999' 까지의 범위를 가집니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"타임존 설정에 따라 바뀌어서 저장됩니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"차이점\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"둘의 가장 큰 차이점은 설정한 타임존에 따라 시간이 설정된다는 점입니다.\\n따라서 위치에 상관없이 시간을 그대로 저장하고 싶다면 DATETIME을, 아니라면 TIMESTAMP로 설정합니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"자바 타입 정하기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"자바에서 지원하는 날짜 타입으로 Date, Timestamp, Instant, LocalDateTime, ZonedDateTime 등이 있습니다.\\n자바 8 이상이라면 Date나 TimeStamp 대신 조건에 맞는 날짜 타입을 쓰는 것이 좋습니다.\", _jsx(_components.br, {}), \"\\n\", \"위에서 DATETIME처럼 시간대 구분 없이 사용할 때는 \", _jsx(_components.code, {\n          children: \"LocalDateTime\"\n        }), \"을 사용합니다.\", _jsx(_components.br, {}), \"\\n\", \"TIMESTAMP 처럼 시간대 구분이 필요할 때는 \", _jsx(_components.code, {\n          children: \"ZonedDateTime\"\n        }), \"을 사용합니다.\", _jsx(_components.br, {}), \"\\n\", \"다른 시간대 말고 무조건 UTC 기준으로 사용할 때 \", _jsx(_components.code, {\n          children: \"Instatnt\"\n        }), \"을 사용합니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"JPA Auditing 설정하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Spring 전체에서 audit 기능을 사용하려면 @EnableJpaAuditing 어노테이션을 추가해줍니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-less\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"@Configuration\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"@EnableJpaAuditing\"\n          }), \"\\nclass Config {\\n...\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"혹은 엔티티 별로 사용하고 싶다면 엔티티에 @EntityListeners 어노테이션을 추가해주면 됩니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Entity\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@EntityListeners(AuditingEntityListener.class)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"MyEntity\"\n          }), \" {\\n\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그리고 Auditing을 설정할 필드에 어노테이션을 추가해줍니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Customer\"\n          }), \" {\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@CreatedDate\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Instant createdDate;\\n\\n  ...\\n  \\n  \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@CreationTimeStamp\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" ZonedDateTime createdAt;\\n}\\n\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"JPA 에서 제공하는 어노테이션 @CreatedDate 는 Instant, LocalDateTime, Date, DateTime 등에 사용 가능합니다.\\n하지만 ZonedDateTime 의 경우 사용할 수 없습니다.\\nZonedDateTime 을 사용하고 싶다면 hibernate에서 제공하는 어노테이션인 @CreationTimeStamp 을 사용하면 됩니다.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
{"pageProps":{"metadata":{"layout":"post","title":"[프로그래머스] 파일명 정렬 (JAVA)","date":"2022-01-08 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"파일명 정렬"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h2: \"h2\",\n      p: \"p\",\n      strong: \"strong\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.Map;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.LinkedHashMap;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.Arrays;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.regex.Matcher;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.regex.Pattern;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Solution\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" String[] solution(String[] files) {\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"/*\\n        HEAD 대소문자 구분 X\\n        앞에 0 무시 숫자 순\\n        TAIL은 순서에 영향 X\\n        */\"\n          }), \"\\n        Map<String, FileName> fileNames = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"LinkedHashMap\"\n          }), \"<>();\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Pattern\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"numberPattern\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Pattern.compile(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"[0-9]+\\\"\"\n          }), \");\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \" (String file : files) {\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Matcher\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"matcher\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" numberPattern.matcher(file);\\n            matcher.find();\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"head\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" file.substring(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \", matcher.start()).toLowerCase();\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"number\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" Integer.parseInt(matcher.group());\\n            fileNames.put(file, \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"FileName\"\n          }), \"(head, number));\\n        }\\n\\n        Arrays.sort(files, (o1, o2) -> {\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"FileName\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"fileName1\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" fileNames.get(o1);\\n            \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"FileName\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"fileName2\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" fileNames.get(o2);\\n\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (!fileName1.head.equals(fileName2.head))\\n                \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" fileName1.head.compareTo(fileName2.head);\\n\\n            \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" fileName1.number - fileName2.number;\\n        });\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" files;\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"FileName\"\n          }), \" {\\n        String head;\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" number;\\n\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"FileName\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(String head, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" number)\"]\n          }), \" {\\n            \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".head = head;\\n            \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"this\"\n          }), \".number = number;\\n        }\\n    }\\n\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"몰랐던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"map에서 입력한 순서를 유지할 때 \", _jsx(_components.strong, {\n          children: \"LinkedHashMap\"\n        }), \"을 사용합니다.\\nJava에서 정규식을 사용할 때 \", _jsx(_components.strong, {\n          children: \"Pattern\"\n        }), \"과 \", _jsx(_components.strong, {\n          children: \"Matcher\"\n        }), \"를 사용해야 합니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.strong, {\n          children: \"Pattern\"\n        }), \"은 정규식 패턴을 만들고 패턴과 일치하는지 확인할 수 있습니다.\", _jsx(_components.br, {}), \"\\n\", \"일치된 패턴을 해석할 때 \", _jsx(_components.strong, {\n          children: \"Matcher\"\n        }), \"를 이용합니다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.strong, {\n          children: \"find\"\n        }), \"로 다음 패턴을 찾고 \", _jsx(_components.strong, {\n          children: \"group\"\n        }), \"으로 찾은 값을 반환 받을 수 있습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
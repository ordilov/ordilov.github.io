{"pageProps":{"metadata":{"title":"Spring 환경 변수","date":"2022-02-15 00:00:01 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"Spring 환경 변수"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      code: \"code\",\n      pre: \"pre\",\n      span: \"span\",\n      ul: \"ul\",\n      li: \"li\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Spring 환경별 환경 변수\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"로컬환경, 테스트환경, 배포환경등 다양한 환경에 따라 변수값을 바꿔줘야할 때가 있습니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"가장 간단하게 적용해볼 수 있는 방법은 커맨드라인이나 환경변수 인자 값으로 넣어주고 실행하는 것입니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"하지만 이렇게 사용하는 경우 변수가 많아지면 복잡하고, 다른 사람과 공유하기 힘듭니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이런 경우 설정파일에 값을 정리하고 프레임워크에서 불러오는 방법을 주로 사용합니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Spring에서는 주로 .properties, .yml 파일 형식을 이용합니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"환경 변수로 사용할 수 있는 요소는 다양한데 값들이 겹치는 경우 우선순위에 따라 적용됩니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"예를 들어 \", _jsx(_components.code, {\n          children: \".properties\"\n        }), \"와 \", _jsx(_components.code, {\n          children: \".yml\"\n        }), \"에서 값이 겹친다면 \", _jsx(_components.code, {\n          children: \".properties\"\n        }), \"가 우선됩니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"@Value\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.springframework.beans.factory.annotation.Value;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" org.springframework.stereotype.Component;\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Component\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"MyBean\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Value(\\\"${name}\\\")\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" String name;\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// ...\"\n          }), \"\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"@Value를 사용한 방법은 SpEL(Spring Expression Language)를 지원합니다.\\n정규식, 클래스, 선언문, 컬렉션등 다양한 표현을 이용한 값을 불러올 수 있습니다.\\n이런 표현식을 통해 위에서 말한 환경변수에 해당하는 값들과 일치하는 경우 불러와 사용할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"@ConfigurationProperties\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"@ConfigurationProperties는 값이 많을 때, 그리고 복잡할 수록 유용합니다.\\n먼저 사용하려면 configuration processor 플러그인과 설정이 필요합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-arduino\",\n          children: [\"annotationProcessor \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"org.springframework.boot:spring-boot-configuration-processor\\\"\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그리고 아래와 같이 설정을 추가해야 합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Configuration()\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@EnableConfigurationProperties(MyProperties.class)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"MyConfiguration\"\n          }), \" {\\n}\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이후 간단하게 값을 명시해주는 경우 \", _jsx(_components.code, {\n          children: \"@ConfigurationProperties\"\n        }), \"로 가능합니다.\\n다른 곳에서 값을 사용하려면 당연히 getter가 필요할 겁니다.\\nsetter의 경우 properties 값이 바인딩 될 때 사용되므로 필수로 넣어줘야 합니다.\\n롬복을 사용한다면 둘다 간단하게 적용할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ConfigurationProperties(\\\"my.service\\\")\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"MyProperties\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"boolean\"\n          }), \" enabled;\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" InetAddress remoteAddress;\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Security\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"security\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Security\"\n          }), \"();\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// getters / setters...\"\n          }), \"\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"static\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Security\"\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" String username;\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" String password;\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" List<String> roles = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"ArrayList\"\n          }), \"<>(Collections.singleton(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"USER\\\"\"\n          }), \"));\\n        \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// getters / setters...\"\n          }), \"\\n    }\\n}\\n\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"열려있는 setter\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위에서 봤듯이 값을 바인딩하기 위해서 setter가 필수로 필요한데 이는 다른 곳에서 값을 변경할 수 있습니다.\\n보통 환경변수 값은 변경하지 않고 불변값으로 사용하므로 이를 막을 수 있는 방법을 제공합니다.\\n멤버 변수를 final로 선언하고 \", _jsx(_components.code, {\n          children: \"@ConstructorBinding\"\n        }), \"을 선언하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ConstructorBinding\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@ConfigurationProperties(prefix = \\\"my.service\\\")\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"class\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"MyProperties\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" String redirectUri;\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" String clientId;\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" String clientSecret;\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"final\"\n          }), \" String accessToken;\\n}\\n\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"변수 작성 시 이름 짓는 규칙\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Java에서 변수명을 보통 camel case로 작성하듯 yaml 변수 명도 자주 사용하는 방식이 있습니다.\\nKebab case로 두 단어를 - 로 구분해 표시합니다.\\nSpring 문서에서 제공한 규칙은 다음과 같습니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"first-name : 제일 추천하는 방식\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"first_name : 대체 방식\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"firstName : camel case 방식\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"FIRSTNAME : 시스템 환경 변수 방식\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"어느 것을 써도 일관성 있게 사용하기만 하면 되지만 추천하는 방식을 사용하면 값을 불러올 때 달라지게 됩니다.\\nfirst-name 과 firstName 처럼 값이 달라지게 되는데 \", _jsx(_components.code, {\n          children: \"@ConstructorBinding\"\n        }), \"에서는 이를 해석해 바인딩합니다.\\n따라서 어느쪽을 써도 Java에서 camel case로 작성하면 그대로 사용할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"메타 데이터 지원\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"추가적으로 \", _jsx(_components.code, {\n          children: \"@ConstructorBinding\"\n        }), \"에서는 메타 데이터를 지원하는데 IDE에서 변수에 대한 자동완성을 돕습니다.\\nyml 파일을 작성할 때도 변수에 키 값들이 자동완성되거나 설명을 볼 수 있었을텐데 그런 값들을 지정할 수 있습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
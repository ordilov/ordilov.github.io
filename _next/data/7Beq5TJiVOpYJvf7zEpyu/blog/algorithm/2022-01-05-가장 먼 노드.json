{"pageProps":{"postMetadata":{"layout":"post","title":"[프로그래머스] 가장 먼 노드 (JAVA)","date":"2022-01-05 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"2022-01-05-가장 먼 노드"},"postContent":{"compiledSource":"var c=Object.defineProperty,l=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable;var r=(e,t,i)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,o=(e,t)=>{for(var i in t||(t={}))a.call(t,i)&&r(e,i,t[i]);if(s)for(var i of s(t))d.call(t,i)&&r(e,i,t[i]);return e},u=(e,t)=>l(e,m(t));var p=(e,t)=>{var i={};for(var n in e)a.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(e!=null&&s)for(var n of s(e))t.indexOf(n)<0&&d.call(e,n)&&(i[n]=e[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:e}=n,t=p(n,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-java\"}),`import java.util.*;\nclass Solution {\n    \n    boolean[] visited;\n    int[] distances;\n    \n    public int solution(int n, int[][] edge) {\n        int answer = 0;\n        List<List<Integer>> graph = new ArrayList<>();\n        visited = new boolean[n+1];\n        distances = new int[n+1];\n        Arrays.fill(distances, 20001);\n        distances[1] = 0;\n        visited[1] = true;\n        \n        for(int i = 0; i <= n; i++){\n            graph.add(new ArrayList<>());\n        }\n        for(int[] e : edge){\n            graph.get(e[0]).add(e[1]);\n            graph.get(e[1]).add(e[0]);\n        }\n        \n        PriorityQueue<Node> queue = new PriorityQueue<>();\n        queue.add(new Node(1, 0));\n        int max = 0;\n        \n        while(!queue.isEmpty()){\n            Node now = queue.poll();\n            int dist = now.dist;\n            int to = now.to;\n            distances[to] = Math.min(distances[to], dist + 1);\n            if(distances[to] > max){\n                max = distances[to];\n                answer = 1;\n            } else if(distances[to] == max){\n                answer++;\n            }\n            for(int i : graph.get(to)){\n                if(visited[i]) continue;\n                visited[i] = true;\n                queue.add(new Node(i, dist + 1));\n            } \n        }\n \n        return answer;\n    }\n    \n    static class Node implements Comparable<Node>{\n        int to;\n        int dist;\n        public Node(int to, int dist){\n            this.to = to;\n            this.dist = dist;\n        }\n        @Override\n        public int compareTo(Node n){\n            return this.dist - n.dist;\n        }\n    }\n}\n`)),mdx(\"h3\",null,\"\\uC2E4\\uC218\\uD588\\uB358 \\uC810\"),mdx(\"p\",null,\"\\uCC98\\uC74C \\uD480\\uC5C8\\uC744 \\uB54C \\uD50C\\uB85C\\uC774\\uB4DC \\uBC29\\uC2DD\\uC744 \\uD480\\uC5C8\\uB354\\uB2C8 \\uBA54\\uBAA8\\uB9AC \\uCD08\\uACFC + \\uC2DC\\uAC04\\uCD08\\uACFC\\uAC00 \\uB098\\uC654\\uC2B5\\uB2C8\\uB2E4.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"\\uADF8\\uB798\\uC11C \\uADF8\\uB798\\uD504 \\uC790\\uB8CC\\uAD6C\\uC870\\uB97C \\uC5F0\\uACB0 \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uBC14\\uAFB8\\uACE0 bfs \\uBC29\\uC2DD\\uC73C\\uB85C \\uD0D0\\uC0C9\\uD588\\uC2B5\\uB2C8\\uB2E4.  \"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"id":"2022-01-05-가장 먼 노드"},"__N_SSG":true}
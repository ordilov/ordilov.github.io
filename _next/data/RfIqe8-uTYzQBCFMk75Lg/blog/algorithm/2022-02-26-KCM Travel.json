{"pageProps":{"postMetadata":{"layout":"post","title":"KCM Travel","date":"2022-02-26 00:01:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"2022-02-26-KCM Travel"},"postContent":{"compiledSource":"var l=Object.defineProperty,d=Object.defineProperties;var v=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var c=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var p=(t,e,a)=>e in t?l(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,n=(t,e)=>{for(var a in e||(e={}))c.call(e,a)&&p(t,a,e[a]);if(i)for(var a of i(e))o.call(e,a)&&p(t,a,e[a]);return t},u=(t,e)=>d(t,v(e));var s=(t,e)=>{var a={};for(var r in t)c.call(t,r)&&e.indexOf(r)<0&&(a[r]=t[r]);if(t!=null&&i)for(var r of i(t))e.indexOf(r)<0&&o.call(t,r)&&(a[r]=t[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:t}=r,e=s(r,[\"components\"]);return mdx(MDXLayout,u(n(n({},layoutProps),e),{components:t,mdxType:\"MDXLayout\"}),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-kotlin\"}),`package boj.graph\n\nimport java.util.*\n\n// [KCM Travel] https://www.acmicpc.net/problem/10217\nfun main() {\n    val sb = StringBuilder()\n    val t = readLine()!!.toInt()\n    repeat(t) {\n        val (n, m, k) = readLine()!!.split(\" \").map { it.toInt() }\n        val graph = Array(n + 1) { ArrayList<Ticket>() }\n        repeat(k) {\n            val (u, v, c, d) = readLine()!!.split(\" \").map { it.toInt() }\n            graph[u].add(Ticket(v, c, d))\n        }\n        val queue = PriorityQueue<Ticket>()\n        val dist = Array(n + 1) { Array(m + 1) { Int.MAX_VALUE } }\n        dist[1][0] = 0\n        queue.add(Ticket(1, 0, 0))\n        var answer = Int.MAX_VALUE\n\n        while (queue.isNotEmpty()) {\n            val cur = queue.poll()\n            if (cur.v == n) {\n                answer = cur.d\n                break\n            }\n            if (dist[cur.v][cur.c] < cur.d) continue\n            for (ticket in graph[cur.v]) {\n                val cost = cur.c + ticket.c\n                val time = cur.d + ticket.d\n\n                if (cost > m) continue\n                if(dist[ticket.v][cost] <= time) continue\n                dist[ticket.v][cost] = time\n                queue.add(Ticket(ticket.v, cost, time))\n            }\n        }\n        sb.append(if (answer == Int.MAX_VALUE) \"Poor KCM\" else answer).append(\"\\\\n\")\n    }\n    println(sb)\n}\n\nprivate class Ticket(val v: Int, val c: Int, val d: Int) : Comparable<Ticket> {\n    override fun compareTo(other: Ticket): Int = d.compareTo(other.d)\n}\n`)),mdx(\"h2\",null,\"\\uC2E4\\uC218\\uD588\\uB358 \\uC810\"),mdx(\"p\",null,`\\uC2DC\\uAC04\\uCD08\\uACFC\\uAC00 \\uACC4\\uC18D \\uB098\\uC640\\uC11C \\uBC18\\uBCF5\\uC791\\uC5C5\\uC744 \\uC904\\uC5EC\\uBD24\\uC9C0\\uB9CC \\uACC4\\uC18D\\uD574\\uC11C \\uC2DC\\uAC04\\uC774 \\uCD08\\uACFC\\uB410\\uC2B5\\uB2C8\\uB2E4.\n\\uACB0\\uAD6D \\uBB38\\uC81C\\uC600\\uB358 \\uBD80\\uBD84\\uC740 \\uB2E4\\uB978 \\uBD80\\uBD84\\uC774 \\uC544\\uB2C8\\uB77C \\uCD9C\\uB825 \\uB54C\\uBB38\\uC774\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\n\\uCC98\\uC74C\\uC5D0 \\uBC18\\uBCF5\\uB9C8\\uB2E4 println() \\uC73C\\uB85C \\uCD9C\\uB825\\uD558\\uB294 \\uC2DD\\uC73C\\uB85C \\uD574\\uC11C \\uC624\\uB798 \\uAC78\\uB838\\uC2B5\\uB2C8\\uB2E4.\nstringbuilder\\uB85C \\uBAA8\\uC544\\uC11C \\uCD9C\\uB825\\uD588\\uB354\\uB2C8 \\uD1B5\\uACFC\\uD560 \\uC218 \\uC788\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\n\\uB9CC\\uC57D \\uB85C\\uC9C1\\uC5D0\\uC11C \\uB9DE\\uB294 \\uAC83 \\uAC19\\uC740\\uB370 \\uC2DC\\uAC04\\uCD08\\uACFC\\uAC00 \\uB098\\uC628\\uB2E4\\uBA74 \\uCD9C\\uB825\\uC744 \\uBAA8\\uC544\\uC11C \\uD574\\uBCF4\\uB294\\uAC78 \\uCD94\\uCC9C\\uB4DC\\uB9BD\\uB2C8\\uB2E4.`))}MDXContent.isMDXComponent=!0;\n","scope":{}},"id":"2022-02-26-KCM Travel"},"__N_SSG":true}
{"pageProps":{"metadata":{"layout":"post","title":"[백준] 순위 검색","date":"2022-02-07 00:45:00 +0900","category":"algorithm","tags":["algorithm"],"keywords":["algorithm"],"id":"행성 터널"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h2: \"h2\",\n      p: \"p\",\n      br: \"br\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" java.util.*\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" parent: IntArray = intArrayOf()\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" rank: IntArray = intArrayOf()\\n\\nfun \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"main\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"val\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"n\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" readLine()!!.toInt()\\n    val xQueue: MutableList<Pair<Int, Int>> = mutableListOf()\\n    val yQueue: MutableList<Pair<Int, Int>> = mutableListOf()\\n    val zQueue: MutableList<Pair<Int, Int>> = mutableListOf()\\n\\n    repeat(n) {\\n        val (x, y, z) = readLine()!!.split(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\" \\\"\"\n          }), \").map { it.toInt() }\\n        xQueue.add(Pair(it, x))\\n        yQueue.add(Pair(it, y))\\n        zQueue.add(Pair(it, z))\\n    }\\n    xQueue.sortBy { it.second }\\n    yQueue.sortBy { it.second }\\n    zQueue.sortBy { it.second }\\n\\n    val queue: PriorityQueue<Pair<Pair<Int, Int>, Int>> = PriorityQueue(compareBy { it.second })\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \" (i in \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \" until n - \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \") {\\n        queue.add(\\n            Pair(\\n                Pair(xQueue[i].first, xQueue[i + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"].first),\\n                xQueue[i + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"].second - xQueue[i].second\\n            )\\n        )\\n        queue.add(\\n            Pair(\\n                Pair(yQueue[i].first, yQueue[i + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"].first),\\n                yQueue[i + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"].second - yQueue[i].second\\n            )\\n        )\\n        queue.add(\\n            Pair(\\n                Pair(zQueue[i].first, zQueue[i + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"].first),\\n                zQueue[i + \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"].second - zQueue[i].second\\n            )\\n        )\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"var\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"result\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), \"\\n    parent = IntArray(n) { it }\\n    rank = IntArray(n) { \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \" }\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"while\"\n          }), \" (queue.isNotEmpty()) {\\n        val (loc, distance) = queue.poll()\\n        val (a, b) = loc\\n        \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"val\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"connect\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" union(a, b)\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (connect) result += distance\\n    }\\n    println(result)\\n}\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" fun \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"union\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(a: Int, b: Int)\"\n          }), \": Boolean {\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"val\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"aRoot\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" find(a)\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"val\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"bRoot\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" find(b)\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (aRoot == bRoot) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"false\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(rank[aRoot] < rank[bRoot])\"\n          }), \" {\\n        parent[aRoot] = bRoot\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n        parent[bRoot] = aRoot\\n        \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(rank[aRoot] == rank[bRoot])\"\n          }), \" rank[aRoot]++\\n    }\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"\\n}\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" fun \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"find\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(a: Int)\"\n          }), \": Int {\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (parent[a] == a) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" a\\n    \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"val\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"findParent\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" find(parent[a])\\n    parent[a] = findParent\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" findParent\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"실수했던 점\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"처음에는 메모리 초과, 그 다음으로는 시간 초과가 계속 발생했던 문제였습니다.\", _jsx(_components.br, {}), \"\\n\", \"그 이유는 행성 간 연결이 최대인 경우 10000 * 99999 / 2 만큼 발생하게 됩니다.\", _jsx(_components.br, {}), \"\\n\", \"이 경로를 전부 저장하려고 했다가 메모리 초과가 나왔습니다.\\n그 다음으로는 한 점에서 다음 행성들에서 나올 수 있는 최솟값만 저장하려고 했습니다.\", _jsx(_components.br, {}), \"\\n\", \"이 방법도 마찬가지로 연결이 최대인 경우 시간 초과가 나와서 통과하지 못했습니다.\", _jsx(_components.br, {}), \"\\n\", \"결국 해결방법은 무식해보이지만 각 축마다 정렬을 하고 인접한 두 점들만 넣어서 구하면 됐습니다.\\n인접한 두 점들만 구하면 된다는 걸 모르면 해결하기 어려운 문제였습니다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
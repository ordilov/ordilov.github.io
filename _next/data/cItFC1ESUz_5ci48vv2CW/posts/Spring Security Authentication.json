{"pageProps":{"metadata":{"layout":"post","title":"Spring Security Authentication","date":"2022-02-04 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"Spring Security Authentication"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\",\n      h3: \"h3\",\n      br: \"br\",\n      pre: \"pre\",\n      span: \"span\",\n      ol: \"ol\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"Architecture\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"SecurityContextHolder > SecurityContext > Authentication\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"SecurityContextHolder\"\n          }), \" 는 인증한 사람의 정보를 저장하는 곳입니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"SecurityContext\"\n          }), \"는 Holder로 부터 얻어서 현재 인증중인 사람의 인증정보를 얻습니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"Authentication\"\n          }), \"은 신원 정보를 담거나 들어온 입력을 의미합니다.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"인증 정보는 AuthenticationManager로 넘어갈 수 있습니다.\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"SecurityContext로 부터 신원정보를 받을 수 있습니다.\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"GrantedAuthority\"\n          }), \" 는 Authentication에 저장된 사람의 부여된 권한입니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"AuthenticationManager\"\n          }), \"는 Spring Secuirty Filter가 인증을 수행하게 하는 API 입니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"ProviderManager\"\n          }), \" 는 AuthenticationManager의 대표적인 구현체입니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"AuthenticationProvider\"\n          }), \"는 ProviderManager 중 인증에 특화된 종류입니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"Request Crendentials with AuthenticationEntryPoint\"\n          }), \" 사용자에게 인증을 요청할 때 쓰입니다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"AbstractAuthenticationProcessingFilter\"\n          }), \" 기본적인 인증을 위한 필터입니다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"SecurityContextHolder\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"인증 정보 넣기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Spring Security는 SecurityContextHolder의 구성방식은 신경쓰지 않습니다.\", _jsx(_components.br, {}), \"\\n\", \"값이 채워져 있으면 현재 인증 정보라고 생각합니다.\", _jsx(_components.br, {}), \"\\n\", \"SecurityContextHolder에 인증 정보를 넣는 간단한 방법은 바로 넣는 것입니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SecurityContext\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"context\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" SecurityContextHolder.createEmptyContext();\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Authentication\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"authentication\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"TestingAuthenticationToken\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"username\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"password\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"ROLE_USER\\\"\"\n          }), \");\\ncontext.setAuthentication(authentication);\\n\\nSecurityContextHolder.setContext(context);\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"빈 SecurityContext를 생성합니다. SecurityContextHolder.getContext().setAuthentication(authentication)\\n처럼 get으로 가져와서 쓰는 방식은 멀티 쓰레드 환경에서 경쟁 상태를 발생할 수 있습니다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Authentication 구현체를 만들어 넣어줍니다. 대표적인 구현체는 \", _jsx(_components.code, {\n            children: \"UsernamePasswordAuthenticationToken\"\n          }), \"입니다.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"SecurityContext를 SecurityContextHolder에 넣어줍니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"인증정보 가져오기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"SecurityContext\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"context\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" SecurityContextHolder.getContext();\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Authentication\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"authentication\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" context.getAuthentication();\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"String\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"username\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" authentication.getName();\\n\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"Object\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"principal\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" authentication.getPrincipal();\\nCollection<? \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"GrantedAuthority\"\n          }), \"> authorities = authentication.getAuthorities();\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"SecurityContextHolder는 ThreadLocal을 사용하기 때문에 같은 쓰레드내에서 언제든 접근이 가능합니다.\", _jsx(_components.br, {}), \"\\n\", \"반대로 쓰레드가 끝나면 인증 정보를 전부 지우면 되기 때문에 안전합니다.\\n별도의 Thread를 사용해서 ThreadLocal를 사용하기 애매한 경우 제공하는 다른 전략을 사용해 접근할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Authentication\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Authentication\"\n        }), \"의 주요 목적은 두 가지입니다.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"AuthenticationManager의 사용자 인증 정보 입력으로 사용됩니다.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"isAuthenticated() 가 false를 반환하는 등으로 쓰입니다.\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"SecurityContext가 담고 있는 현재 사용자의 인증 정보를 나타냅니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Authentication이 갖고 있는 정보입니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"principal : 사요자가 누구인지 구분하는데 사용합니다. 주로 UserDetails를 사용합니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"credentials : 주로 비밀번호로 유출을 방지하도록 끝난 이후에 지워집니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"authroities : GrantedAuthoritys는 유저가 부여 받은 권한으로 role이나 scope가 해당합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"GrantedAuthority\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"GrantedAuthority 는 \", _jsx(_components.code, {\n          children: \"Authentication.getAuthorities()\"\n        }), \" 메소드로 얻습니다.\", _jsx(_components.br, {}), \"\\n\", \"메소드는 GrantedAuthroity 객체의 Collection으로 반환됩니다.\\nROLE_ADMINISTRATOR 처럼 \", _jsx(_components.code, {\n          children: \"ROLE_\"\n        }), \" prefix로 구분되며 주로 UserDetailsService 에서 호출됩니다.\", _jsx(_components.br, {}), \"\\n\", \"이러한 권한의 주의할 점은 주로 전역적으로 쓰이기 때문에 특정 객체를 기준으로 생성하면 안됩니다.\", _jsx(_components.br, {}), \"\\n\", \"예를 들어 ID 54번 만을 위한 권한을 만들거나 각각으로 만들다보면 authorities가 많아져 메모리가 부족하게 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"AuthenticationManager\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Spring Security Filter에서 인증을 수행하는 API입니다.\\nController에서 SecurityContextHolder에 저장된 Authentication의 인증 정보를 얻으려할 때 호출됩니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"ProviderManager\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"ProviderManager는 AuthenticationManager의 대표적인 구현체로 쓰입니다.\", _jsx(_components.br, {}), \"\\n\", \"ProviderManager는 AuthenticationProvider의 List에게 넘어갑니다.\\n각각의 AuthenticationProvider는 성공, 실패 혹은 다음 AuthenticationProvider에서 결정하게 정할 수 있습니다.\\n\", _jsx(_components.code, {\n          children: \"ProviderNotFoundException\"\n        }), \"은 \", _jsx(_components.code, {\n          children: \"AuthenticationException\"\n        }), \"중 인증을 위한 타입이 없다는 것을 나타내는 예외입니다.\\nAuthenticationProvider가 여러 개인 이유는 password, SAML, token등 다양한 인증 방법을 가능하게 합니다.\\n이렇게 여러가지 인증방법을 \", _jsx(_components.code, {\n          children: \"AuthenticationManager\"\n        }), \" 빈 하나에서 관리할 수 있습니다.\\n물론 여러 SecurityFilterChain을 관리하기 위해 AuthenticationManager의 구현체가 여러개 일 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"ProviderManager에서 주의할 점은 기본적으로 주요한 인증 정보는 지워진다는 점입니다.\\n만약에 성능 향상을 위해 유저 객체등을 캐싱할려고 한다면 절대로 인증 정보의 참조값을 사용해선 안됩니다.\\n지워지기 때문에 캐시에서 사용하려고 할 때는 없을 수 있습니다.\\n명확한 해결책은 두 가지입니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"인증 정보 객체를 완전히 복사한 객체를 사용합니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"eraseCredentialAfterAuthentication 속성을 끕니다.\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
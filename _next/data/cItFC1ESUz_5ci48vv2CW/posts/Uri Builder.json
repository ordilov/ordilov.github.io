{"pageProps":{"metadata":{"layout":"post","title":"Java URI Builder","date":"2022-02-07 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"Uri Builder"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"URI Builder\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"자바에서 URI 클래스는 문자열에서 URI 객체를 생성하거나 URI 구성 별로 가져올 수 있습니다.\\n하지만 구성 요소들을 조합해서 URI를 만들려고 할 때 직접 문자열들을 합쳐서 만들 수 밖에 없습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"URI\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"uri\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"URI\"\n          }), \"(host + port + path + query);\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"query에 여러 값이 들어가거나 하면 만드는게 번잡해집니다.\\n이런 불편함을 해소하기 위해 URI 빌더 클래스들이 있습니다.\\n대표적으로 Spring의 UriComponentsBuilder가 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"UriComponentsBuilder\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-variable\",\n            children: \"uri\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-operator\",\n            children: \"=\"\n          }), \" UriComponentsBuilder.fromUri(uri)\\n                                .queryParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"name\\\"\"\n          }), \", name)\\n                                .queryParam(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"age\\\"\"\n          }), \", age)\\n                                .build();\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"문자열을 직접 조합할 필요 없이 key value 형식으로 query를 조합할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"URI query 파싱하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"query의 전체부분을 가져오는 방법은 간단합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"uri.getQuery();\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"다만 이렇게 출력된 결과는 query에 key value를 구분하는 특수문자('=', '&') 이 전부 합쳐져 있습니다.\\n구분한 값을 받아오려면 \", _jsx(_components.code, {\n          children: \"getQueryParams()\"\n        }), \"를 사용하면됩니다.\\n반환된 결과는 MultiValueMap인데 그 이유는 쿼리에서 하나의 key에 여러 value를 넣을 수 있어서 입니다.\\n따라서 key 에 따라 반환된 List String value 값들을 사용하면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-java\",\n          children: \"MultiValueMap<String, String> queryParams = u.getQueryParams();\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
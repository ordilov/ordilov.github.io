{"pageProps":{"metadata":{"layout":"post","title":"JPA Bulk Insert","date":"2022-05-15 00:01:00 +0900","category":"backend","tags":["backend"],"keywords":["backend"],"id":"JPA Bulk Insert"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      ul: \"ul\",\n      li: \"li\",\n      strong: \"strong\",\n      img: \"img\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"대량의 데이터를 Insert할 때\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"적은 데이터를 insert 한다면 DB와 네트워크 연결이 시간이 제일 오래 소요되기 때문에 개수가 늘어도 큰 차이가 나지 않습니다.\\n하지만 대량의 데이터를 입력한다면 방법에 따라 성능이 많이 차이날 수 있습니다.\\n성능을 향상시키기 위한 기본적인 방법은 다음과 같습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"트랜잭션을 하나로 묶기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"start\"\n          }), \" transaction;\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" table1 (id, name) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'name1'\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" table1 (id, name) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'name2'\"\n          }), \");\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"commit\"\n          }), \";\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"트랜잭션을 열고 닫는 데도 시간이 들기 때문에 작업을 트랜잭션 하나로 묶어주면 조금이라도 성능이 올라갑니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Bulk insert 사용하기\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" table1 (id, name) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'name1'\"\n          }), \"), (\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'name2'\"\n          }), \");\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"MySQL에서는 Bulk Insert라고 불리는 방법으로, 여러 row를 한 번에 입력하는 방법입니다.\\n이렇게 여러 row를 입력하는 경우 unique 제약조건이나, 외래 키 제약조건을 임시적으로 꺼두면 성능이 더 올라갈 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-ini\",\n          children: [\"SET \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"unique_checks\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\nSET \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"foreign_key_checks\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"0\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\\n... insert\\n\\nSET \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"unique_checks\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\nSET \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"foreign_key_checks\"\n          }), \"=\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \";\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"여러 row를 한 번에 insert하는 경우에 데이터 패킷의 크기가 너무 커서 못 받을 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"show\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"global\"\n          }), \" variables \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"like\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'max_allowed_packet'\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 때 필요한만큼 \", _jsx(_components.code, {\n          children: \"max_allowed_packet\"\n        }), \" 크기를 키워주면 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"JPA Bulk Insert\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"JPA에는 명시적으로 bulk insert를 하는 방법이 존재하지 않습니다. JPA에서 insert하는 메소드는 persist() 하나로, 컬렉션을\\n한 번에 저장하는 방법은 존재하지 않습니다. 하지만 Data JPA의 JpaRepository에서는 saveAll() 메소드가 존재합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Transactional\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" <S \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"T\"\n          }), \"> List<S> \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"saveAll\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"(Iterable<S> entities)\"\n          }), \" {\\n\\n    Assert.notNull(entities, \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Entities must not be null!\\\"\"\n          }), \");\\n\\n    List<S> result = \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"ArrayList\"\n          }), \"<>();\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \" (S entity : entities) {\\n        result.add(save(entity));\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" result;\\n}\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"내부 구현을 살펴보면 saveAll() 메소드도 persist를 반복문으로 처리하는 것으로 다른 점이 없어 보입니다.\\n그럼에도 insert를 여러 개 할 경우 save() 대신 saveAll()을 써야하는 이유가 있습니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"메소드를 여러번 호출하는 것과 한 번 호출하는 것만으로도 차이가 있습니다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"@Transactional 어노테이션으로 새로운 트랜잭션 호출에 따른 시간 차이가 있습니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"save() 메소드는 @Transactional 어노테이션이 존재합니다.\\n@Transactional 의 기본 전파 타입은 \", _jsx(_components.code, {\n          children: \"REQUIRED\"\n        }), \"로 호출 시 새로운 트랜잭션이 생성됩니다.\\n따라서 호출 시마다 트랜잭션을 생성하게 되어 위에서 설명한 \", _jsx(_components.strong, {\n          children: \"트랜잭션을 하나로 묶기\"\n        }), \"조차 안되는 상태가 됩니다.\\n반면 saveAll()을 사용하는 경우 클래스 내부에서 save()를 호출하게 되는데 이 경우 Self-Invocation이 발생하여 트랜잭션이 생성되지 않습니다.\\n따라서 saveAll() 메소드의 @Transactional 어노테이션의 트랜잭션만 생성되어 트랜잭션이 하나로 묶이게 됩니다.\\n이 결과로 1만건만 테스트해봐도 42초와 5초 차이로 큰 성능 차이가 나는 것을 확인할 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/image/jpa/save_saveall.png\",\n          alt: \"save saveAll 차이\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"하지만 hibernate에서 생성되는 sql문은 여전히 여러 개의 insert문을 보내는 방식입니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/image/jpa/insert_many.png\",\n          alt: \"insert 여러번\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"bulk insert로 sql문을 하나로 보내 성능을 향상시키려면 몇 가지 설정이 더 필요합니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Batch Size 설정\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"jdbc batch_size\"\n        }), \" 값을 설정하면 크기만큼 sql문을 모아서 한 번에 DB 서버에 요청합니다.\\n\", _jsx(_components.code, {\n          children: \"batch_size\"\n        }), \"가 정해져있는 이유는 모든 엔티티가 영속성 컨텍스트에 올라가면 \", _jsx(_components.code, {\n          children: \"OutOfMemoryException\"\n        }), \"이 발생할 수 있어\\nbatch_size를 기준으로 flush()와 clear() 작업을 진행해서 입니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yaml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"spring.jpa.properties.hibernate.jdbc.batch_size:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"20\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"order_inserts, order_updates 설정\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"같은 테이블에 대한 insert나 update가 모여 있지 않으면 batch 처리를 할 수 없습니다.\\n\", _jsx(_components.code, {\n          children: \"order_inserts\"\n        }), \" 와 \", _jsx(_components.code, {\n          children: \"order_updates\"\n        }), \"를 설졍해주면 같은 테이블에 insert끼리 묶어줍니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-yml\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"spring.jpa.properties.hibernate.order_inserts:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"spring.jpa.properties.hibernate.order_updates:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"mysql datasource url 설정\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-bash\",\n          children: [\"spring.datasource.url: jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"&profileSQL=\", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"true\"\n          }), \"&logger=Slf4JLogger\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"rewriteBatchedStatements\"\n        }), \" 옵션을 적용해주면 여러 insert 쿼리를 bulk insert 방식으로 재작성해줍니다.\\n이렇게 재작성된 쿼리는 Hibernate에 찍히는 SQL 로그와 달라지는데 바뀐 쿼리를 보고 싶은 경우\\n\", _jsx(_components.code, {\n          children: \"profileSQL=true\"\n        }), \" 를 추가해주면 실제 mysql 쿼리를 볼 수 있습니다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sql\",\n          children: [\"Hibernate: \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"member\"\n          }), \" (name, id) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (?, ?)\\nHibernate: \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"member\"\n          }), \" (name, id) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (?, ?)\\nHibernate: \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"member\"\n          }), \" (name, id) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (?, ?)\\nMon May \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"16\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"17\"\n          }), \":\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"08\"\n          }), \":\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"39\"\n          }), \" KST \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2022\"\n          }), \" INFO: [QUERY] \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"insert\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"into\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"member\"\n          }), \" (name, id) \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"values\"\n          }), \" (\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'0'\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \"),(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'1'\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"2\"\n          }), \"),(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'2'\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"3\"\n          }), \")\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Identity 전략 문제\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"MySQL에서 Id 자동 생성 전략을 사용하는 경우 Identity 전략을 주로 사용합니다.\\n문제는 Identity 전략의 경우 다음 Id를 받아오기 위해서 insert를 해야하기 때문에 bulk insert 작업을 지원하지 않습니다.\\n따라서 bulk insert를 사용하려면 2가지 해결책이 있습니다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"해결책 1. Id 자동 생성 전략 변경\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Id 자동 전략을 Sequence 전략이나 Table 전략으로 변경하면 bulk insert가 가능합니다.\\n하지만 단순히 Sequence 전략으로 바꾸기만 하면 성능은 더 안 좋아지게 됩니다.\\nSequence 전략을 사용하면 insert하기 전에 다음 id를 찾는 select문과 다음 id를 설정하는 update문이 나가게 됩니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-vbnet\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-symbol\",\n            children: \"Hibernate:\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"select\"\n          }), \" next_val \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"as\"\n          }), \" id_val \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"from\"\n          }), \" hibernate_sequence \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"for\"\n          }), \" update\\n\", _jsx(_components.span, {\n            className: \"hljs-symbol\",\n            children: \"Hibernate:\"\n          }), \" update hibernate_sequence \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"set\"\n          }), \" next_val= ? \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"where\"\n          }), \" next_val=?\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"기본 id 생성은 하나씩 생성되기 때문에 insert하기 전에 매번 두 개의 쿼리가 더 나가게 됩니다.\\n따라서 생성해서 사용할 Id 범위를 지정해줘야합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Id\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@GenericGenerator(\\n        name = \\\"sequence-generator\\\",\\n        strategy = \\\"org.hibernate.id.enhanced.SequenceStyleGenerator\\\",\\n        parameters = {\\n                @Parameter(name = \\\"sequence_name\\\", value = \\\"hibernate_sequence\\\"),\\n                @Parameter(name = \\\"optimizer\\\", value = \\\"pooled\\\"),\\n                @Parameter(name = \\\"initial_value\\\", value = \\\"1\\\"),\\n                @Parameter(name = \\\"increment_size\\\", value = \\\"100\\\")\\n        }\\n)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@GeneratedValue(\\n        strategy = GenerationType.SEQUENCE,\\n        generator = \\\"SequenceGenerator\\\"\\n)\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"private\"\n          }), \" Long id;\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"increment_size\"\n        }), \"를 지정해주어 크기만큼의 id는 조회나 업데이트 없이 생성할 수 있게 됩니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"해결책 2: JDBC 사용하기\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"JPA를 꼭 써야만 하는 게 아니라면 bulk insert 작업을 JDBC로 분리할 수도 있습니다.\\njdbcTemplate의 batchUpdate() 메서드를 사용해 bulk insert가 가능해집니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-java\",\n          children: [\"jdbcTemplate.batchUpdate(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"INSERT INTO MEMBER(`NAME`) VALUES(?)\\\"\"\n          }), \",\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"new\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-class\",\n            children: \"BatchPreparedStatementSetter\"\n          }), \"() {\\n    \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"void\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"setValues\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(PreparedStatement ps, \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"int\"\n            }), \" i)\"]\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"throws\"\n          }), \" SQLException {\\n        ps.setString(\", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \", \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"member\\\"\"\n          }), \" + i);\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@Override\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"public\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title hljs-function\",\n            children: \"getBatchSize\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          }), \" {\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1000\"\n          }), \";\\n    }\\n});\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"결론\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"JPA로만 작성한다면 키 자동 생성 전략을 바꾸는 게 좋습니다.\\n하지만 JDBC를 사용한다면 키 자동 생성 전략을 그대로 사용할 수 있고 성능도 전반적으로 더 빨랐습니다.\\n다른 DB를 쓰거나 설정이 달라진다면 결과가 다를 수 있지만 MySQL 기준으로 데이터 크기가 커질수록\\nJDBC 쪽이 성능이 더 좋은 것을 확인할 수 있었습니다.\\n물론 두 방법 어느 쪽을 사용하더라도 사용하지 않는 쪽에 비해 큰 성능 차이를 확인할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/image/jpa/insert_difference.png\",\n          alt: \"성능 차이\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"참고\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://jaehun2841.github.io/2020/11/22/2020-11-22-spring-data-jpa-batch-insert/#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\",\n            children: \"https://jaehun2841.github.io/2020/11/22/2020-11-22-spring-data-jpa-batch-insert/#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://homoefficio.github.io/2020/01/25/Spring-Data%EC%97%90%EC%84%9C-Batch-Insert-%EC%B5%9C%EC%A0%81%ED%99%94/\",\n            children: \"https://homoefficio.github.io/2020/01/25/Spring-Data%EC%97%90%EC%84%9C-Batch-Insert-%EC%B5%9C%EC%A0%81%ED%99%94/\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://www.baeldung.com/spring-data-save-saveall\",\n            children: \"https://www.baeldung.com/spring-data-save-saveall\"\n          })\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}
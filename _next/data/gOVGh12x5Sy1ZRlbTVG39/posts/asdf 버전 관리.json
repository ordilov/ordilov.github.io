{"pageProps":{"metadata":{"title":"asdf - 버전 관리하기","date":"2022-08-01 00:45:00 +0900","category":"dev","tags":["backend"],"keywords":["backend"],"description":"여러 언어의 버전을 하나의 CLI로 관리하기","id":"asdf 버전 관리"},"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      a: \"a\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      ul: \"ul\",\n      li: \"li\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"문제\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"개발을 하다보면 어느 언어이든 하나의 버전이 아니라 다양한 버전이 필요할 때가 있습니다.\\n레거시를 유지보수할 때 특히 많이 겪게 됩니다.\\nIDE를 사용하는 경우, 설치되어 있는 언어를 고르기 쉬울 수 있지만 CLI로 작업하는 경우 매번 설정하는 것은 귀찮은 일입니다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"nodejs를 사용한다면 \", _jsx(_components.a, {\n          href: \"https://github.com/nvm-sh/nvm\",\n          children: \"nvm\"\n        }), \"을 주로 사용해봤을거고, python이라면 \", _jsx(_components.a, {\n          href: \"https://github.com/pyenv/pyenv\",\n          children: \"pyenv\"\n        }), \"를 한번쯤은 접해봤을 겁니다.\\njava는 \", _jsx(_components.a, {\n          href: \"https://github.com/shyiko/jabba\",\n          children: \"jabba\"\n        }), \"라는 프로젝트를 사용하기도 합니다.\\n하지만 사용하는 언어가 많다면 버전 관리자를 따로 관리하는 것도 귀찮습니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"asdf\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"https://asdf-vm.com/\",\n          children: \"asdf\"\n        }), \"는 이 다양한 언어들을 한꺼번에 관리할 수 있게 해줍니다.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"설치\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"제가 사용하는 맥 기준으로 설치는 brew로 설치 가능합니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-shell\",\n          children: \"brew install asdf\\necho -e \\\"\\\\n. $(brew --prefix asdf)/libexec/asdf.sh\\\" >> ${ZDOTDIR:-~}/.zshrc\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"사용법\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"asdf는 다양한 언어들을 플러그인으로 관리합니다.\\n플러그인을 설치하고 언어의 원하는 버전을 설치한 후 버전을 설정해주면 됩니다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"asdf plugin install [name]\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"asdf install [name] [version]\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"asdf global [name] [version]\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"원리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"asdf도 다른 버전 관리자들과 마찬가지로 \", _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Shim_(computing)\",\n          children: \"shim\"\n        }), \"이라는 개념을 사용합니다.\\n\", _jsx(_components.strong, {\n          children: \"shim\"\n        }), \"은 간단하게 설명하면 프록시처럼 실제로 실행될 프로그램 앞 단에서 가로채서 먼저 처리하는 형식입니다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"정리\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"기존에 언어마다 따로 쓰고 있던 버전 관리툴을 하나로 관리할 수 있게 됐습니다.\\n더 자세한 사용법을 알고 싶다면 \", _jsx(_components.a, {\n          href: \"https://asdf-vm.com/\",\n          children: \"asdf\"\n        }), \"를 참고해주세요.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}